/**
@mainpage Nebula 2

The Nebula Device is an open source realtime 3D game/visualization engine,
written in C++. Version 2 is a modern rendering engine making full use
of shaders. It is scriptable through TCL/Tk, Lua, Python and Ruby.
It currently supports DirectX 9, with support for OpenGL in the works.
It runs on Windows, with ports being done to Linux and Mac OS X.

  - @ref Nebula2GettingStarted
  - @ref Nebula2Overview
  - @ref RadonLabsDifferences
*/

/**
@page Nebula2Overview Overview of Nebula 2

  - @ref Nebula2IntroSystems
  - @ref Nebula2IntroFeatures
  - @ref Nebula2IntroHistorical

@section Nebula2IntroSystems Systems

  - @ref Kernel
  - @ref NebulaResourceSystem
  - @ref NebulaGraphicsSystem
  - @ref NebulaInputSystem
  - @ref Scene
  - @ref NebulaAnimationSystem
  - @ref NebulaParticleSystem
  - @ref Gui
  - @ref NebulaAudioSystem
  - @ref NebulaSignals

  See also @ref NebulaContribModules.

@section Nebula2IntroFeatures High-level Features

  - <b>Shader Based Graphics</b>: Nebula 2 is 'shader-centric': all
    render state is handled by the shaders. It's possible to render
    many effects without changing any C++ code, just by writing new
    shaders. Shader parameters can be created and altered from the
    in-game console. The DX9 implementation uses Direct3D Effect
    Files (<tt>.fx</tt>).
    
  - <b>Animation</b>: Many things can be animated in Nebula 2: shader
    parameters, position, rotation, scale. The animations can be driven
    by time or any other variable of your choice, and you can choose
    from step, linear and quaternion slerp interpolation.
    
  - <b>Hierarchical Object Name Space</b>: Nebula 2 objects live in a
    hierarchical tree of named nodes similar to a file system hierarchy.
    An object name can be converted into a C++ pointer and a C++ pointer
    can be converted into a name at any time. Having named objects around
    is very convenient when referencing objects through the script
    interface, or in their persistent state. Runtime efficiency doesn't
    suffer from this, since normally, references by name are resolved
    into references by pointer only once at load/initialization time.
    During an object's lifetime, references to other objects are
    normally kept as cached C++ pointers.

  - <b>Scripting</b>: Scripting in Nebula 2 means sending script commands
    directly to C++ objects. Nebula 2 objects come with 2 interfaces: their
    C++ interface for runtime efficiency, and a script interface
    for flexibility. The script interface is as close
    to the C++ interface as possible to minimize work on the dispatcher
    code (around 3..6 lines of codes per script command). Internally,
    script commands are handed around in language independent binary
    packets, which are translated by a script server object into and from
    a specific script syntax. Nebula 2 can be used with many script languages
    and switching to other is just a matter of writing new script server
    classes. See @ref NebulaTwoScriptInterface for information on how to
    control Nebula from script.
    
  - <b>Networking</b>: A running instance of Nebula 2 can be controlled, via
    the script server, from another process on the local machine or another
    remote machine.  This is mainly used for debugging. There is also a
    game oriented networking layer (see @ref Network).

  - <b>Object Persistence</b>: Nebula 2 objects survive on disk as 
    scripts that contain exactly the sequence of script commands
    that would put a default object of that class into an exact clone
    of the object which created the script. Since the object persistency
    mechanism reuses the script interface there is no conceptual difference
    between a "Nebula script" and a "Nebula data file".  A binary
    "script server" also allows objects to be saved out in a compact,
    efficient binary representation that can be loaded quickly.

  - @ref Gui: Nebula 2 provides a full blown system for providing
    themeable user interfaces within the game.
    
@section Nebula2IntroHistorical Historical Documents

   - @ref Nebula2ChangeLog
   - @ref Nebula2InitialReleaseNotes
*/

/**

@page Nebula2GettingStarted Getting Started With Nebula 2

  - @ref Nebula2GSObtaining
  - @ref Nebula2GSCompiling
  - @ref Nebula2GSExtending
  - @ref Nebula2GSUsing

@section Nebula2GSObtaining Obtaining Nebula 2

Full information on how to obtain Nebula 2 can be found on our
<a href="http://nebuladevice.cubik.org/downloads/">website</a>. We highly
recommend using CVS directly as that is the easiest way to remain up to
date with the evolving Nebula 2 codebase, as well as submit your own changes
back to us.

@section Nebula2GSCompiling Compiling Nebula 2

For information on compiling The Nebula Device, see @ref Nebula2Compiling. For
information on the specialized build system that Nebula 2 uses, see
@ref NebulaBuildSystem.

@section Nebula2GSExtending Extending Nebula 2

  - @ref NebulaWritingClass

@section Nebula2GSUsing Using Nebula 2

  - @ref Nebula2Tutorials
*/

