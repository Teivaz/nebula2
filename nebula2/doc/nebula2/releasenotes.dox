/**

@page Nebula2InitialReleaseNotes Initial Releasenotes for Nebula 2

@section Nebula2RNIntro Intro

@note This page is historical and some information contained here may be
out of date as the codebase has evolved significantly since the initial
release of Nebula 2.

This is the first source code release of Nebula 2. Please note that much 
of this code is early, experimental, buggy and not optimized at all.

   - @ref Nebula2RNOpenSourceIntegration
   - @ref Nebula2RNLinuxAndOpenGL
   - @ref Nebula2RNChanges
      - @ref Nebula2RNBuildChanges
      - @ref Nebula2RNKernelChanges
      - @ref Nebula2RNGraphicsChanges
      - @ref Nebula2RND3D9GFX
      - @ref Nebula2RNSceneGraphChanges
      - @ref Nebula2RNResourceSubsystem
      - @ref Nebula2RNAnimationSubsystem
      - @ref Nebula2RNCharacterSubsystem
      - @ref Nebula2RNVariableSubsystem
      - @ref Nebula2RNMicroTCL
      - @ref Nebula2RNTools
   - @ref Nebula2RNKnownBugs

This is the first source code release of Nebula 2. Please note that much
of this code is early, experimental, buggy and not optimized at all.

@section Nebula2RNOpenSourceIntegration Integration with Open Source Nebula

You will notice that almost none of the features of the current Open Source
version are present in this code, there may also be bugs which are already fixed
in the OpenSource version. This is not a good thing, but here is at least an
attempt of explanation: it would be incredibly hard for us to base our
Nebula programming directly on the SourceForge version. This has external
and internal reasons:

    - The SourceForge CVS server is down or not accessible from time to time
    - Working from a local LAN CVS repository is simply faster then DSL
    - It would be hard to keep classified code (i.e. the Nebula Xbox
      extension packages) separated from the public code without
      introducing a total mess in the directory structure
    - When doing complete rewrites, it is next to impossible to keep
      OS-specific code functional without having access to
      a machine running that OS. In that case it's better to restart
      from scratch and let somebody with better understanding
      of the platform figure out what needs to be done.

The biggest problem is that 2 separate CVS tree's (our local tree and the
offical OpenSource tree) cannot be synced automatically (at least I didn't
find a way how to do it with CVS). If this problem can be solved I'd be more then
happy to do daily tree syncs. I'll try to work out a solution with BruceM
and Leaf. Switching to Bitkeeper(http://www.bitkeeper.com/) may be the solution 
but we'll have to look into it more.


@section Nebula2RNLinuxAndOpenGL A word about Linux and OpenGL

I'd like to have done a Linux and OpenGL port of the new code out of interest
and as a proof of concept of the new gfx code. Alas, there was simply no time.
I think Linux is technically superior to Windows, but the games market is
on Windows and consoles. Thus, those platforms have the priority for us as a 
games company. On the other hand, we will not lock ourselves into the Windows 
trap. One important Nebula design priority should always be portability. 

And well, OpenGL support under Win32: I'm not really keen to do real OpenGL 
work until 2.0 is out. Things get done faster and cleaner under D3D9 
compared to current OpenGL with extensions. It's as simple as that, 
unfortunately. 

OpenGL 2.0 may change that, but one thing concerns me. Adding a standard highlevel 
shader language to the API is a good thing. But there is no sign yet from the ARB
to go one logical step further: offer a standardized shader framework 
which does the complete render state setup. D3D9 offers the FX framework for 
this, and it has improved fundamentally since DX8. NVidia offers the same 
functionality with their CgFX framework, which should be multiplatform, and 
emits code for DX8, DX9 and OpenGL. But just as D3D, CgFX is controlled by a 
single company. Others may offer shader framework solutions for OpenGL, but 
this is not necessarly a good thing. What good is a standard HLSL if in 
the real world the shader files are still "not quite compatible"?

@section Nebula2RNChanges Changes from Nebula 1

@subsection Nebula2RNBuildChanges Build Process Changes

Nebula2 now supports building statically linked executables. This started
all with the Xbox port, and it worked out so well that I'd like to 
fade out support for dynamic class loading completely. This sounds like
a bad thing at first, but it is not. Nebula is still modular thanks to its
build file generation process. You just configure your statically linked application
by selecting the Nebula extension you'd like to have compiled into the
app, run "tclsh84 update.tcl", and compile. What you get is a single executable
instead of an executable and some dlls. This means no more dll conflicts between
parallel Nebula installations, simpler debugging, and potentially better performance
because some compilers do additional optimizations at link time.

The only downside is larger executables (somewhere between a few 100 KBytes and
1.5 MByte, depending on the Nebula modules linked into the application). Still,
startup times under Windows are much faster, because DLL loading is abnormally
slow under Windows, and no Nebula toc files must be parsed at startup.

@subsection Nebula2RNKernelChanges Kernel Changes

   - general utility classes have been moved from inc/kernel to to inc/util

   - some more general cleanup and cruft removal

   - the special case hacks for nRoot derived classes which are part of the 
     kernel have been removed

   - moderate changes for static linking

   - n_error() can now do printf() style text formatting

   - new n_message() function for "important" messages which are not
     fatal errors

   - a new nRemoteServer class, which contains the remote control 
     functionality previously found in the script server
  
   - memory footprint optimizations in nRoot (possibly at the cost of 
     search-by-name performance though)
  
   - new concept: log handlers. the nLogHandler object receives all n_printf(), 
     n_message() and n_error() text messages and handles them in a platform 
     specific way (implemented in subclasses). There are 2 subclasses of 
     nLogHandler so far: nDefaultLogHandler routes everything to stdout, 
     nWin32LogHandler maintains a log file for n_printf() messages, and 
     displays Win32 MessageBoxes() for n_error() messages (this has the
     beneficial effect that n_assert()'s are now properly displayed in a 
     MessageBox).
  
@subsection Nebula2RNGraphicsChanges Graphics Subsystem Changes  

The old nGfxServer based subsystem has been completely dropped and replaced by
the new gfx2 subsystem.
 
The design goals for the new gfx2 subsystem were: simplicity, shader centric,
optimization friendly and portability. Backward compatibility was not a priority.
  
     - Simplicity: The new gfx2 subsystem relies much more on resource compilation
       as an offline process then before. This is a good thing because it moves
       complexity from the performance critical application into the tool chain.
       An example is mesh pooling at runtime. Meshes are no longer packed
       into larger vertex buffers at runtime, instead it is expected that mesh
       resources are 'bundled' into optimally sized "mesh bundles" during
       resource compilation.
       
     - Shader Centric: The fixed function pipelines of the past are finally dead!
       The gfx2 subsystem totally relies on external shader frameworks to configure
       the render pipeline. The main job of the graphics subsystem has become
       to update shader parameters and push geometry into the rendering API. The
       optimization hotspot of the new gfx2 subsystem is the optimal tunneling
       of shader parameters from the scene graph to the shader objects (this
       is also where more optimization work needs to be done currently).
       
     - Optimization Friendly: the gfx2 class interfaces and object interactions 
       are more abstract then before, allowing better platform specific 
       optimizations under the hood.
       
     - Portability: how portable the new gfx2 subsystem really is remains to be 
       seen ;)
 
The core classes of the gfx2 subsystem are nGfxServer2, nMesh2, nShader2 and nTexture2.

   - nGfxServer2: factory for nMesh2, nShader2 and nTexture2. Simplified display mode
     and view volume setup, render targets (== render to texture). Cleaner drawing interface.
     Clear() and PresentScene() now moved out of BeginScene()/EndScene(). Rendering drastically
     simplified:
     @n
     @verbatim
     nGfxServer2::SetMesh(int stream, nMesh2*);          /// sets current mesh
     nGfxServer2::SetShader(nShader2*);                  /// sets current shader
     nGfxServer2::SetTexture(int stage, nTexture2*);     /// sets current texture
     nGfxServer2::Draw();                                /// draws currently set objects
     @endverbatim
     @n
     No SetRenderState(). That's the job of the shader framework now.
       
   - nMesh2: contains vertex and index data, may contain several "mesh groups" which are
     triangle partitions inside the mesh (this is the way to merge many 3d objects into
     a single vertex/index buffer pair). Also very handy for multi-material meshes or 
     skin meshes which need to be partitioned to account for limited joint palette size 
     in the vertex shader, etc. There is a new nDynamicMesh helper class similar to 
     the old nDynVertexBuffer class to help with geometry which must be created by the 
     CPU (although with vertex shaders this is not as important as before).
  
   - nTexture2: textures can now be cube maps, 3d maps and render targets. No support
     for floating point pixel formats yet (I'm stuck with a GForce3 at the moment).
  
   - nShader2: now loads and compiles itself from a shader file (for instance a 
     DX9 FX file). Begin(), Pass(), End() is still there, plus setter functions
     to update shader parameters. No SetRenderState() here either, you define your
     render states in the shader file, and the shader framework sets them when needed.
     Textures are usually also not set through the gfx server, but as a shader parameter.
     This let's the shader decide when and where to set textures.
     @n@n
     Render to texture is straightforward:

@code
    // create a render target texture
    nTexture2* renderTarget = gfxServer->NewRenderTarget(...);
    ...
    // render to texture...
    gfxServer->SetRenderTarget(renderTarget);
    gfxServer->BeginScene();
    ... render something...
    gfxServer->EndScene();
    
    // restore back buffer as render target and do some "real" rendering
    gfxServer->SetRenderTarget(0);
    gfxServer->BeginScene();
    gfxServer->Clear(...);
    ... render to backbuffer, potentially using "renderTarget" as a source texture
    gfxServer->EndScene();
    gfxServer->PresentScene();
@endcode

@subsection Nebula2RND3D9GFX The Direct3D 9 based GFX Subsystem

These are the nD3D9Server, nD3D9Mesh, nD3D9Texture and nD3D9Shader classes. The one
killer feature is the support for DX9 highlevel shaders embedded into FX files.
HLSL shaders kick some serious butt I must say. Deriving smooth skinning vertex 
shaders from the static geometry vertex shaders took me half an hour or so. 

Simply cool.

@subsection Nebula2RNSceneGraphChanges Scenegraph Subsystem Changes

This is currently the most experimental part and very likely to change
drastically in the near future.

The old @c nSceneGraph based subsystem has been dropped completely. It would
have been hard to make use of the flexibility of the gfx2 subsystem with
the old scene graph subsystem. Also I wanted to try out a few new ideas
which solved problems we had in Nomads (for instance, too much granularity
in the scene graph hierarchy, confusing channel subsystem, @c nLinkNode
related problems, etc...)

The following design goals are still valid: 
        
   - It must be possible to render a single scene node multiple 
     times per frame (scene nodes must be state-less)
        
   - The scene graph subsystem performs no culling, higher level
     code is expected to perform culling and only attach visible
     objects to the scene. There is simply no one-size-fits-all
     culling mechanism.
          
   - Scene graph hierarchy fragments are "black boxes" with 
     an abstract "dials and buttons" interface which allows to
     manipulate objects somewhere deep in the hierarchy. Formerly,
     the dials and buttons were implemented in the channel subsystem,
     now it's done with render contexts (see below).
        
New parent classes nSceneServer (replaces @c nSceneGraph) and nSceneNode
(replaces @c nVisNode), new code directories "inc/scene" and "src/scene".
  
The primary goal was to find an efficient and flexible way to define 
shader parameters in scene graph nodes, and to tunnel them to the
nShader2 objects as fast as possible (not quite there yet, though).
  
nSceneServer itself does not implement a specific scene rendering technique.
It just defines an as-simple-as possible interface to collect the scene graph
data. Instead, subclasses of nSceneServer are expected to implement a
specific scene rendering/lighting solution (not everyone wants to do Doom3
style rendering). 
  
The scene node class hierarchy is now more vertical then flat. This is normally a
bad sign in object oriented design, and I'm not yet totally convinced whether the
advantages outweight the disadvantages. But the performance and memory
overhead should be reduced now quite a bit. Instead of a hierarchy of n3DNode, 
nTextureArray, nMeshNode and nShaderNode you now have one nShapeNode which defines 
position, shader parameters, textures and geometry. The inheritance diagram looks like
this currently:
  
  @verbatim
    nSceneNode
    ...
    +- nTransformNode
        |
        +- nAbstractShaderNode
            |
            +- nVolumeLightNode
            |
            +- nMaterialNode
                |
                +- nShapeNode
  @endverbatim
 
@c Attach() is still there, but @c Compute() has been replaced by a set of more 
specialized methods. Instead of a single @c Compute() method, scene graph nodes
are now asked by the scene server what type of rendering they can perform 
(@c HasTransform(), @c HasGeometry(), @c HasShader(), @c HasLightVolume()), and they 
have associated render functions: @c RenderTransform(), @c RenderGeometry(), 
@c RenderShader() and @c RenderLightVolume() which are called by the scene
graph at various times during rendering.
                
new concept: animators. There is now an nAnimator class derived from nSceneNode. 
The job of animators is to manipulate scene nodes which want to be manipulated in
any way. A scene node keeps a list of animator objects it depends on. Before
rendering, the scene node calls the Animate() method for each of its attached
animators, and the animator in turn manipulates the scene node. That way, a single
animator object can serve any number of "client objects". This was not
possible with the old concept.
  
Animators are more restrictive because of performance reasons. There is no more
universal @c nIpol class, instead nTransformAnimator, nVectorAnimator, etc.
That way the manipulation can be done through C++ methods, and doesn't have 
to go through the dynamic method invocation interface. Not as elegant, but 
definitely faster.
  
New concept: render contexts! This replaces the dreaded animation channel system,
is just as flexible (even more powerful), faster, and easier to understand...
hopefully ;)

A nRenderContext object is basically a container for frame-persistent, named, 
typed data which must be accessible by a scene node hierarchy.
The basic idea is that ALL data which is context specific and must persist between
frames is kept in nRenderContext objects, basically everything which cannot be
kept in the nSceneNode objects because of the "state-less-dogma".
nRenderContext objects are owned by the client application and should usually
be associated with game objects which need to render themselves. Every method
which deals with rendering a scene node also has a render context parameter:
  
@verbatim
  nSceneServer::Attach(nSceneNode* sceneNode, nRenderContext* renderContext);
  nSceneNode::RenderTransform(..., nRenderContext* renderContext, ...);
  nSceneNode::RenderGeometry(..., nRenderContrext* renderContext);
  ...
  nAnimator::Animate(nSceneNode* sceneNode, nRenderContext* renderContext);
@endverbatim

No behind-the-scene-magic happens, the render context objects handed to the
scene nodes during rendering are exactly the same ones which live at application
level in the game objects.
  
@subsection Nebula2RNResourceSubsystem The Resource Subsystem

This is a new subsystem made of the nResourceServer and nResource class. The
idea is to have objects which store resource data (meshes, textures, shaders,
animation data, sound data) managed in a central place and as a first step
towards more powerful and smarter resource loading (better on demand loading,
or loading complete resource bundle files at once).
  
Classes like nMesh2, nTexture2, nShader2 are direct subclasses of nResource
for instance.

@subsection Nebula2RNAnimationSubsystem The Animation Subsystem

The main goal was to allow animations to be either streamed from disk or 
to be stored in memory. This allows a tradeoff between animation length and
number of animated objects. Streamed animation data can be hours long,
but the number of objects that can be served depends on the speed
of the hard disk. It's not quite done yet and still very experimental.
  
The concept of mutually exclusive animation states which are made of several 
animation clips (formerly known as animation loops) which can be weight-blended
into a resulting animation has been moved from the character subsystem into
the animation subsystem.
  
Animation states can now have an adjustable fade-in time, which smoothly 
interpolates from one animation state to the next when states are switched.
  
Not much to show yet though.

@subsection Nebula2RNCharacterSubsystem The Character Subsystem

   - Changes have been made to allow simple implementation of characters with 
     multiple skins. Much of the animation code has been moved into the
     more general animation subsystem.
  
   - Knows about limited joint palette sizes and "partitioned" skins to account
     for the limited number of vertex shader constants during skin rendering.
  
   - Skinning has been moved from the CPU into the vertex shader, with basically 
     unlimited number of skeleton joints and 4 influences per vertex. 
  
   - Joint translation, rotation and scaling now fully supported, the previous 
     system allowed only translation/rotation of the root bone, and only 
     rotation for the other bones.

@subsection Nebula2RNVariableSubsystem The Variable Subsystem

   - The variable system is a global registration for named variables. A named
     variable can be converted into a unique numeric handle, which can be used
     to identify the variable more efficiently then a string.

   - nVariableContext objects are used to hold shader parameters in various places,
     and is also the base class of nRenderContext

@subsection Nebula2RNMicroTCL MicroTCL

This is a stripped down Tcl8.4 version with 36 core Tcl commands only.
No file io, networking, background jobs, event handling etc. It does
not need any external runtime environment files. It can be linked
statically into the application and has a code size of about 160KB
(vs. 660 KB @c tcl84.dll). We derived this version for the Nebula
Xbox port, but it should prove useful for other things as well.
Nebula comiles with MicroTcl as default, but can be configured to
run under the classic Tcl environment as well (undef the
@c __MICROTCL__ define in <tt>kernel/system.h</tt>).
  
@subsection Nebula2RNTools File Formats, Tools and Toolkit Classes

   - The new @c n3d2 and @c nvx2 mesh file formats keep all vertex components
     together all the time, this makes flattening unnecessary. The @c n3d2
     fileformat is no longer a Wavefront @c .obj clone. 

   - @c wfObject, @c wfToolBox, and all the @c wfTools have been removed and replaced by
     (I think) better alternatives.

   - Instead of all the @c wfTools there is now one @c nmeshtool, which offers most
     of the old functionality in one tool (except really weird stuff which has
     been dropped).
  
   - @c nbmp2ntx is now called @c nimagetool and can now create cubemaps
     (and normalization cube maps as a special case)
  
   - an @c nanimtool will be used to process and convert animation files
     (doesn't exist yet)

   - @c nnpktool is still there but must be updated

   - The nMeshBuilder class is a general geometry processing class which offers
     many useful operations on meshes. It's main purpose is to simplify writing
     command line tools or modelling package plugins which must generate, conert
     or process mesh data for Nebula 2. Some useful operations on meshes are 
     @c Transform(), @c BuildTangents() (uses the NVMeshMender lib), @c Append(), @c Copy(), 
     @c Split() etc...
  
   - The nSkinPartitioner class partitions a nMeshBuilder object into
     multiple pieces to prepare the mesh for smooth skinning with limited
     number of joints in the vertex shader.
  
   - The nBspBuilder class will be a very basic BSP partitioner for meshes,
     but is not complete yet.
  
   - nAnimBuilder is a similar utility class for processing animation
     data for Nebula.
  
   - My work focus has been on a Maya exporter plugin recently that's why some
     of the command line tools may not be quite up to date.
  
   - @c ngfxserver.exe is now called @c nviewer.exe and is a proper Win32
     application if compiled under Win32 (no ugly console window).
  
   - the @c nremoteshell.exe is a standalone remote control client, remote 
     functionality has been removed from @c nsh.exe.
  
   - @c nsh.exe is pretty much the same, but has been rewritten from scratch.

@section Nebula2RNKnownBugs Known Bugs

@bug The code has been tested on GForce3, and briefly on GForce2,4MX and
Radeon8500.  Get the latest reference drivers! If vertex shaders/pixel
shaders 1.1 are not supported, the current .fx files will fall back to
software vertex shaders and pixel rendering through the classical
multitexture pipeline (this still gives you bumped per-pixel-lighting,
but no specular highlights).

@bug the tangent generation for per pixel lighting in nMeshBuilder
sometimes has problems with too simple or too complex geometry

@bug Nebula should have a consistent nTime datatype which could either be set 
to float or double, depending on the applicaion needs.

@bug memleak in nD3D9Server because of a non-released nD3D9Mesh

@bug routing of shader parameters from scene graph to shader object
should be more efficient

@bug the ingame console sometimes display older chars past the current
end-of-line (this is a new bug)

@bug transfer of joint palette data from character skeleton to shader should
be more optimized

@bug Weird rendering slowdown and stuttering on some systems with the
nMRTSceneServer.  Seems like the graphics subsystem or DX9 steps itself
on the feet because if the console is opened rendering becomes smoother.


Thats it! Have fun,
-Floh.
*/

