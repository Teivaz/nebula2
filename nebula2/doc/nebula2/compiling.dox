/**

@page Nebula2Compiling Compiling Nebula2

    - @subpage Nebula2CompilingOSWin32
    - @subpage Nebula2CompilingOSOSX
    - @subpage Nebula2CompilingOSLinux
  
At the moment, Nebula 2 will compile on Win32 and Linux, Mac OSX may need some work. However, the only @ref nGfxServer2 and @ref nInputServer currently available are @ref nD3D9Server and @ref nDI8Server for Win32, there is also a contributed OpenGL gfx server that needs some loving.

@section Nebula2CompilingRequirements General Requirements

Nebula has a Python based build system that generates projects, solutions, or makefiles that you can open in your IDE or feed to your compiler of choice. Currently it supports MS Visual C++ (7.0 or later) on Win32, and GCC/G++ on Linux/Win32/MacOSX (at least in theory). To run the build system you need to install the following:

    - <a href="http://www.python.org">Python (2.4 or later recommended)</a>
    - <a href="http://www.wxpython.org">WxPython (2.6 or 2.8 recommended, 2.7 is <b>not recommended</b>)</a>

Note that wxPython is only neccessary if you want to use the build system via the GUI, this is highly recommended, especially for first time users. However if you're unable or unwilling to install wxPython you can use the build system via the commandline interface.

*/

/**
@page Nebula2CompilingOSWin32 Compiling Nebula2 on Windows

    - @ref Nebula2CompilingOSWin32Requirements
    - @ref Nebula2CompilingOSWin32Preparation
        - @ref Nebula2CompilingOSWin32PreparationVS7
        - @ref Nebula2CompilingOSWin32PreparationVCTK
    - @ref Nebula2CompilingOSWin32BuildFiles
        - @ref Nebula2CompilingOSWin32BuildFilesVS7
        - @ref Nebula2CompilingOSWin32BuildFilesOther
    - @ref Nebula2CompilingOSWin32Compiling
        - @ref Nebula2CompilingOSWin32CompilingVS7
        - @ref Nebula2CompilingOSWin32CompilingOther
    - @ref Nebula2CompilingOSWin32Troubleshooting

@section Nebula2CompilingOSWin32Requirements Additional Requirements

    - Windows 2000 or Windows XP (other Win32 platforms may work but have not been tested)
        - Microsoft no longer supports using Windows 2000 with the most recent DirectX SDKs.
    - Microsoft <A HREF="http://msdn.microsoft.com/directx">DirectX 9 SDK</A>. Nebula2 does not work with versions earlier than the <A HREF="http://www.microsoft.com/downloads/details.aspx?FamilyId=9216652F-51E0-402E-B7B5-FEB68D00F298&displaylang=en">2003 "Summer Update" version</A>. We do not support the 2004 Summer SDK due to bugs in that SDK, but the October 2004 and later versions are fine.
    
  - Visual 7.0 - 8.0 (.NET), or Visual C++ Toolkit 2003.
  - Visual C++ 6 is no longer supported.

If you are using Visual C++ Toolkit 2003, then you will need an updated <a href="http://www.microsoft.com/msdownload/platformsdk/sdkupdate/default.htm">Core SDK</a> from Microsoft. Without this, Nebula will fail to compile due a missing @c shfolder.h, or because of the lack of headers/libs (in the toolkit).
  
@section Nebula2CompilingOSWin32Preparation Preparation

  - Add @c nebula2/bin/win32 to your path

@subsection  Nebula2CompilingOSWin32PreparationVS7 Visual C++ 7.0 and later

Under "Tools->Options->Projects->VC++ Directories" make sure that the DX9 libs and include directories are before VStudio's lib and include directory paths (Note: Do not do this if you are using VC 8.0, the headers included with VC 8.0 are newer than those in the DX SDK).

@subsection  Nebula2CompilingOSWin32PreparationVCTK Visual C++ 2003 Toolkit

These instructions also apply if you are building using make and a regular copy of Visual C++.

@note Instead of using GNU Make or Cygwin you might want to experiment with <a href="http://www.gotdotnet.com/team/cplusplus/">vcbuild</a>, we haven't tried it though so it may not work.

In order to compile with the toolkit, you will need these additional requirements:

    - GNU Make or a Cygwin environment

If using a regular command prompt, make sure that <tt>make.exe</tt> is located on your path.

@section Nebula2CompilingOSWin32BuildFiles Create The Build Files

Anytime files are added or removed from Nebula 2 this step must be repeated.

@subsection Nebula2CompilingOSWin32BuildFilesVS7 Visual C++ 7.0 and later

Navigate to <code>nebula2/</code> and double click on <code>update.py</code>, if you correctly installed Python and wxPython you should see the Nebula 2 Build System application displayed. You can use this application to create the project and solution files for Visual Studio, in the directory <code>nebula2/build/vstudio##</code>. Read the manual that's available through Help->Manual on the Main Menu to figure out what you need to do before proceeding to the next step.

@subsection Nebula2CompilingOSWin32BuildFilesOther Visual C++ 2003 Toolkit or Other

@note If you're experimenting with vcbuild - generate build files for Visual C++ 7.1 as described above instead of using update.tcl as described below.

Navigate to <code>nebula2/</code> and double click <code>update.py</code>. Makefiles for the Visual C++ 2003 Toolkit are generated in the directory <code>nebula2/build/makefile</code>.

@section Nebula2CompilingOSWin32Compiling Compiling

@subsection Nebula2CompilingOSWin32CompilingVS7 Visual C++ 7.0 and later

Open the Nebula2.sln (or whatever solution you want to build) in the directory that corresponds to your version of Visual Studio. Then select Build->Build Solution from the Main Menu. The binaries will be located in <code>nebula2/bin/win32</code>, or <code>nebula2/bin/win32d</code> for debug versions.

If you'd like to do a command-line based build using Visual Studio, rather than deal with Makefiles and the like, try using <tt>devenv.com /build</tt>:

    - http://msdn.microsoft.com/library/en-us/vsintro7/html/vxlrfbuild.asp

Note: be sure to use <tt>devenv.com</tt> rather than <tt>devenv.exe</tt> as it is lighter weight and still gets the job done.

@subsection Nebula2CompilingOSWin32CompilingOther Visual C++ 2003 Toolkit or Other

To create the correct build environment:
  - Launch a Visual C++ 2003 Toolkit Prompt.
  - Add path/to/your/directx/sdk/Lib to the "LIB" environment variable, and path/to/your/directx/sdk/Bin to the "INCLUDE" variable.
  - Navigate to the directory in which the Microsoft Platform SDK is installed, and execute the "SetEnv" batch file.
  - Navigate to your nebula2 "build/makefile" directory.
    
@note If you wish to compile in cygwin, you will need to create a custom script to set the PATH, INCLUDE, and LIB environment variables for the compiler to work.

Run "make" to build nebula2. e.g:

@verbatim
    make [workspace]
@endverbatim

This will compile the workspace "[workspace]", or alternatively if a workspace is not specified, everything. Executable files will be located in <code>nebula2/bin/win32</code>, and will have a ".exe" extension.

If you wish to compile a debug build, set the "N_DEBUG" parameter to "true", e.g.:

@verbatim
  make N_DEBUG=true [workspace]
@endverbatim

Executable files will then be located in <code>nebula2/bin/win32d</code>. 


@section Nebula2CompilingOSWin32Troubleshooting Troubleshooting

  - The IDE doesn't recognize .cc files as c++ source in VS7.1: 

Open Studio, go to Tools...Options...Projects...VC++ Build...C/C++ File Extensions and add .cc. 

  - The nmake fails 

You may need to set up the Visual Studio environment variables. You can do this by running the VCVARS32.BAT batch file, which usually exists in a directory like C:\\Program Files\\Microsoft Visual Studio\\VC98\\Bin\\. If you get errors while running that batch file about being out of environment space, please see <A HREF="http://support.microsoft.com/default.aspx?scid=KB;EN-US;Q230205&">this</A>.

  - <code>error C2660: 'D3DXCreateFont' : function does not take 12 parameters</code>

Install one of the supported versions of the DirectX 9 SDK, as described above.

*/
/**
@page Nebula2CompilingOSOSX Compiling Nebula2 on Mac OS X

    - @ref Nebula2CompilingOSOSXPreparation
    - @ref Nebula2CompilingOSOSXMakefiles
    - @ref Nebula2CompilingOSOSXCompiling

@section Nebula2CompilingOSOSXPreparation Preparation

  - Cross your fingers and your toes, and repeat "The MacOSX build will work!" over and over again.
  - If the MacOSX build does not in fact work you obviously just don't want it bad enough.
  - If you really really want it but it still doesn't work, your only option is to write a new generator for the build system to support MacOSX, or update the existing makefile generator.

@section Nebula2CompilingOSOSXMakefiles Generate The Makefiles

From the commandline, navigate to <code>nebula2/</code> and type

@verbatim
  python update.py
@endverbatim

If you correctly installed Python and wxPython you should see the Nebula 2 Build System application displayed, if it does not appear check the gui.log in the root nebula2 directory for any errors. You can use this application to generate the makefiles for g++ by selecting the makefile generator from the Generator drop-down. Makefiles will be generated in the directory <code>nebula2/build/makefile</code>. Read the manual that's available through Help->Manual on the Main Menu to figure out what you need to do before proceeding to the next step. The GUI is entirely optional, if you wish to use the commandline interface a list of supported commands can be obtained by typing

@verbatim
  python update.py -help
@endverbatim

Anytime .bld files are added, modified or removed this step must be repeated.

@section Nebula2CompilingOSOSXCompiling Compiling

From the commandline, navigate to <code>nebula2/build/makefile</code>, and type

@verbatim
  make OSTYPE=darwin [workspace]
@endverbatim

This will compile the specified workspace, or alternatively if a workspace is not specified, everything. Binary files will be output to <code>nebula2/bin/macosx</code>.

If you wish to compile a debug build, set the "N_DEBUG" parameter to "true"

@verbatim
  make OSTYPE=darwin N_DEBUG=true [workspace]
@endverbatim

Binary files from a debug build will be output to <code>nebula2/bin/macosxd</code>. Additionally you can set "N_PROFILE" to add profiling flags.

*/

/**

@page Nebula2CompilingOSLinux Compiling Nebula2 on Linux

    - @ref Nebula2CompilingOSLinuxRequirements
    - @ref Nebula2CompilingOSLinuxMakefiles
    - @ref Nebula2CompilingOSLinuxCompiling

@section Nebula2CompilingOSLinuxRequirements Additional Requirements

  - GCC version 3.0 or later
  - GNU make
  - Theora, Ogg, Sqlite3 and UUID development packages, the Ubuntu specific versions are listed below, names may differ on other Linux distros.
  
@subsection Nebula2CompilingOSLinuxUbuntuPackages Ubuntu Edgy Packages

You can find and install these packages using Synaptic or Adept Manager.

  - g++ (will install the latest gcc)
  - make
  - libtheora-dev
  - libogg-dev
  - sqlite3-dev
  - uuid-dev

@section Nebula2CompilingOSLinuxMakefiles Generate The Makefiles

Open a terminal window, navigate to <code>nebula2/</code>, and type

@verbatim
  python update.py
@endverbatim

If you correctly installed Python and wxPython you should see the Nebula 2 Build System application displayed, if it does not appear check the gui.log in the root nebula2 directory for any errors. You can use this application to generate the makefiles for g++ by selecting the makefile generator from the Generator drop-down. Makefiles will be generated in the directory <code>nebula2/build/makefile</code>. Read the manual that's available through Help->Manual on the Main Menu to figure out what you need to do before proceeding to the next step. The GUI is entirely optional, if you wish to use the commandline interface a list of supported commands can be obtained by typing

@verbatim
  python update.py -help
@endverbatim

Anytime .bld files are added, modified or removed this step must be repeated.

@section Nebula2CompilingOSLinuxCompiling Compiling

In the terminal window, navigate to <code>nebula2/build/makefile</code>, and type

@verbatim
  make OSTYPE=linux [workspace]
@endverbatim

This will compile the specified workspace, or alternatively if a workspace is not specified, everything. Binary files will be output to <code>nebula2/bin/linux</code>.

If you wish to compile a debug build, set the "N_DEBUG" parameter to "true"

@verbatim
  make OSTYPE=linux N_DEBUG=true [workspace]
@endverbatim

Binary files from a debug build will be output to <code>nebula2/bin/linuxd</code>. Additionally you can set "N_PROFILE" to add profiling flags.

*/

