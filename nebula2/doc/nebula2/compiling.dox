/**

@page Nebula2Compiling Compiling Nebula2

  - Compiling
    - @ref Nebula2CompilingOSWin32
    - @ref Nebula2CompilingOSOSX
    - @ref Nebula2CompilingOSLinux
  - Testing
    - @ref Nebula2CompilingTesting
  
@section Nebula2CompilingNote Notes

If you are familiar with Nebula 1 please read the @ref Nebula2InitialReleaseNotes first, since a lot has changed in the build process.

At the moment, Nebula 2 will compile on Win32, Linux and Mac OSX.  However, the only @ref nGfxServer2 and @ref nInputServer currently available are @ref nD3D9Server and @ref nDI8Server for Win32.

@section Nebula2CompilingRequirements General Requirements

Nebula has a script based build system that generates projects, solutions, workspaces or makefiles that you can open in your IDE or feed to your compiler.

  - If you are using Microsoft Visual C++ (7.0 or later) you will need to install the following in order to run the build system:
    - <a href="http://www.python.org">Python (2.4 recommended)</a>
    - <a href="http://www.wxpython.org">WxPython (2.6 recommended)</a>
  - If you are using some other IDE/compiler check below that it is supported, if it is you will need Tcl8.4 to run the build system. You can download Tcl8.4 from:
    - <A HREF="http://www.tcl.tk">Tcl Developer Xchange</A> or
    - <A HREF="http://tcl.sourceforge.net">Sourceforge</A> or 
    - <A HREF="http://www.activestate.com">ActiveState</A>

@section Nebula2CompilingOSWin32 Windows

@subsection Nebula2CompilingOSWin32Requirements Additional Requirements

  - Win2k or WinXP (other Win32 platforms may work but have not been tested)
  - Microsoft <A HREF="http://msdn.microsoft.com/directx">DirectX 9 SDK</A>. Nebula2 does not work with versions earlier than the <A HREF="http://www.microsoft.com/downloads/details.aspx?FamilyId=9216652F-51E0-402E-B7B5-FEB68D00F298&displaylang=en">2003 "Summer Update" version</A>. We do not support the 2004 Summer SDK due to bugs in that SDK, but the October 2004 version is fine.
  - Visual 7.0 - 8.0 (.NET), or Visual C++ Toolkit 2003. Visual C++ 6 is no longer supported.

If you are using Visual C++ Toolkit 2003, then you will need an updated <a href="http://www.microsoft.com/msdownload/platformsdk/sdkupdate/default.htm">Core SDK</a> from Microsoft. Without this, Nebula will fail to compile due a missing @c shfolder.h, or because of the lack of headers/libs (in the toolkit).
  
@subsection Nebula2CompilingOSWin32Preparation Preparation

  - Add @c nebula2/bin/win32 to your path

@subsubsection  Nebula2CompilingOSWin32PreparationVS7 Visual C++ 7.0 and later

Under "Tools->Options->Projects->VC++ Directories" make sure that the DX9 libs and include directories are before VStudio's lib and include directory paths (Note: Do not do this if you are using VC 8.0, the headers included with VC 8.0 are newer than those in the DX SDK).

@subsubsection  Nebula2CompilingOSWin32PreparationVCTK Visual C++ 2003 Toolkit

These instructions also apply if you are building using make and a regular copy of Visual C++.

@note Instead of using GNU Make or Cygwin you might want to experiment with <a href="http://www.gotdotnet.com/team/cplusplus/">vcbuild</a>, we haven't tried it though so it may not work.

In order to compile with the toolkit, you will need these additional requirements:

    - GNU Make or a Cygwin environment

If using a regular command prompt, make sure that <tt>make.exe</tt> is located on your path.

@subsection Nebula2CompilingOSWin32BuildFiles Create The Build Files

Anytime files are added or removed from Nebula 2 this step must be repeated.

@subsubsection Nebula2CompilingOSWin32BuildFilesVS7 Visual C++ 7.0 and later

Navigate to <code>nebula2/</code> and double click on <code>update.py</code>, if you correctly installed Python and wxPython you should see the Nebula 2 Build System application displayed. You can use this application to create the project and solution files for Visual Studio, in the directory <code>nebula2/build/vstudio##</code>. Read the manual that's available through Help->Manual on the Main Menu to figure out what you need to do before proceeding to the next step.

@subsubsection Nebula2CompilingOSWin32BuildFilesOther Visual C++ 2003 Toolkit or Other

@note If you're experimenting with vcbuild - generate build files for Visual C++ 7.1 as described above instead of using update.tcl as described below.

Navigate to <code>nebula2/</code> and double click <code>update.tcl</code>. Makefiles for the Visual C++ 2003 Toolkit are located in the directory <code>nebula2/build/makefile</code>. You can tell that <code>update.tcl</code> has completed successfully when it pops up a featureless grey window.

@subsection Nebula2CompilingOSWin32Compiling Compiling

@subsubsection Nebula2CompilingOSWin32CompilingVS7 Visual C++ 7.0 and later

Open the Nebula2.sln (or whatever solution you want to build) in the directory that corresponds to your version of Visual Studio. Then select Build->Build Solution from the Main Menu. The binaries will be located in <code>nebula2/bin/win32</code>, or <code>nebula2/bin/win32d</code> for debug versions.

@subsubsection Nebula2CompilingOSWin32CompilingOther Visual C++ 2003 Toolkit or Other

To create the correct build environment:
  - Launch a Visual C++ 2003 Toolkit Prompt.
  - Add path/to/your/directx/sdk/Lib to the "LIB" environment variable, and path/to/your/directx/sdk/Bin to the "INCLUDE" variable.
  - Navigate to the directory in which the Microsoft Platform SDK is installed, and execute the "SetEnv" batch file.
  - Navigate to your nebula2 "build/makefile" directory.
    
@note If you wish to compile in cygwin, you will need to create a custom script to set the PATH, INCLUDE, and LIB environment variables for the compiler to work.

Run "make" to build nebula2. e.g:

@verbatim
    make [workspace]
@endverbatim

This will compile the workspace "[workspace]", or alternatively if a workspace is not specified, everything. Executable files will be located in <code>nebula2/bin/win32</code>, and will have a ".exe" extension.

If you wish to compile a debug build, set the "N_DEBUG" parameter to "true", e.g.:

@verbatim
  make N_DEBUG=true [workspace]
@endverbatim

Executable files will then be located in <code>nebula2/bin/win32d</code>. 


@subsection Nebula2CompilingOSWin32Troubleshooting Troubleshooting

  - The IDE doesn't recognize .cc files as c++ source in VS7.1: 

Open Studio, go to Tools...Options...Projects...VC++ Build...C/C++ File Extensions and add .cc. 

  - <code>LINK : fatal error LNK1104: cannot open file 'libci.lib'</code> 

Insert <code>/NODEFAULTLIB:libci.lib</code> every time <code>AdditionalOptions=\"/MACHINE:IX86</code> occurs in <code>makesln.tcl</code>.  I don't know if there's a reason why this isn't included in the file already -- is there a better way to avoid this error? 

  - <code>update.tcl</code> isn't producing .sln files under VS7.x 

Make sure that uuidgen.exe is in your path. 

 - Even with <tt>uuidgen.exe</tt> on the path, .sln files are still not being generated.

Try running <tt>update.tcl</tt> from the command line instead:

@verbatim
    tclsh84 update.tcl
@endverbatim

  - <code>update.tcl</code> doesn't complete successfully (fails to pop up its grey window)

<code>update.tcl</code> has probably choked on a bad build file.  I believe you can get slightly better debugging information for this case by running it from the command line, with:

@verbatim
    tclsh84 update.tcl
@endverbatim

  - The nmake fails 

You may need to set up the Visual Studio environment variables. You can do this by running the VCVARS32.BAT batch file, which usually exists in a directory like C:\\Program Files\\Microsoft Visual Studio\\VC98\\Bin\\. If you get errors while running that batch file about being out of environment space, please see <A HREF="http://support.microsoft.com/default.aspx?scid=KB;EN-US;Q230205&">this</A>.

  - A header @c shfolder.h is missing.

This usually happens to users of Visual Studio 6 who have not installed the updated Core SDK as described above.  Be sure that you have told Visual Studio where to find the new headers.

  - <code>LNK1561: entry point must be defined</code>

You are using Visual Studio 6, but haven't configured it to recognize <tt>.cc</tt> files correctly.  You may also have forgotten to restart Visual Studio after editing your registry to make it recognize <tt>.cc</tt> files.

  - <code>error C2660: 'D3DXCreateFont' : function does not take 12 parameters</code>

Get the DirectX 9 SDK "Summer Update", as described above.

  - misc: install paths containing spaces have not been tested and may result in, uhm, "unexpected behaviour".


@section Nebula2CompilingOSOSX Mac OSX

@subsection Nebula2CompilingOSOSXPreparation Preparation

  - If you are using Panther (10.3), Apple has included TCL 8.4 so you
    will not need to worry about installing this yourself.

  - Add <code>nebula2/bin/macosx</code> to your path

@subsection Nebula2CompilingOSOSXBuildFiles Create The Build Files

From the command line, go to <code>nebula2/</code> and type

@verbatim
  tclsh8.4 update.tcl -build xcode
@endverbatim

<b>Note:</b> The executable name on OS X is <tt>tclsh8.4</tt> and not <tt>tclsh84</tt> as it is on Windows.

This will build the XCode projects which will be located in the @c nebula2/build/xcode directory.  Any time files are added or removed from Nebula 2 this step must be repeated.

@subsection Nebula2CompilingOSOSXCompiling Compiling

Open the Xcode projects found in @c nebula2/build/xcode and build them.

The binaries will be located in <code>nebula2/bin/macosx/</code>.

@section Nebula2CompilingOSLinux Linux

@subsection Nebula2CompilingOSLinuxRequirements Additional Requirements

  - GCC version 3.0 or later
  - GNU make  

@subsection Nebula2CompilingOSLinuxPreparation Preparation

  - Add <code>nebula2/bin/linux</code> to your path

@subsection Nebula2CompilingOSLinuxBuildFiles Create The Build Files

From a terminal, go to <code>nebula2/</code> and type

@verbatim
  tclsh update.tcl
@endverbatim

This will use the <code>.bld</code> files to create the Makefile's for compiling on linux, which are located in the directory <code>nebula2/build/makefile</code>. Anytime files are added or removed from Nebula 2 this step must be repeated.

@subsection Nebula2CompilingOSLinuxCompiling Compiling

From the command line, go to <code>nebula2/build/makefile</code>, and type

@verbatim
  make OSTYPE=linux [workspace]
@endverbatim

This will compile the workspace "[workspace]", or alternatively if a workspace is not specified, everything. Binary files will be located in <code>nebula2/bin/linux</code>.

If you wish to compile a debug build, set the "N_DEBUG" parameter to "true", e.g.:

@verbatim
  make OSTYPE=linux N_DEBUG=true [workspace]
@endverbatim

Binary files will be located in <code>nebula2/bin/linuxd</code>. Additionally you can set "N_PROFILE" to add profiling flags.

@section Nebula2CompilingTesting Testing Nebula2

You can launch <tt>nviewer</tt>, found in the platform specific <tt>bin</tt>
directory.  On Windows, it will be in either <tt>bin/win32</tt> or
<tt>bin/win32d</tt> (if you've built a debug version).

Once nviewer is running, you can hit the <tt>escape</tt> key and then
hit the <tt>Gfx</tt> button in the dock at the bottom of the screen
to select some examples files to load.

The DX9 HLSL shader files are in <tt>data/shaders/2.0</tt> and
<tt>data/shaders/fixed</tt>.  Note that the samples will not look very
impressive unless you have a graphics card that can do vertex and pixel
shaders well. On lesser hardware the specular lighting and other features
will not work.  Note that we do not provide shaders for all shader hardware,
so some shader hardware (GeForce 3 and 4) are not supported well.
*/

