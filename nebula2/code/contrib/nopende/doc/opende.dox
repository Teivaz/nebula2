/**
    @defgroup NOpenDEContribModule nOpenDE Contributed Module
    @ingroup NebulaContribModules
    @brief nOpenDE is a lightweight wrapper for the Open Dynamics Engine.
    
    <h2>Introduction</h2>
    This is an OpenDE wrapper for Nebula 2, nOpenDE is <b>NOT</b> a port 
    of nOdePhysics from Nebula 1. nOpenDE was written from scratch with the 
    goal of providing a minimal layer on top of OpenDE that simplified usage 
    of OpenDE from Nebula and additionally exposed the majority of the 
    functionality to script languages so some simulation setup could be done from 
    script.<br>

    <h2>Installation</h2>
    This module should be checked out to @c nebula2/code/contrib/nopende,
    add the <b>nopende</b> target to the project of your choice and re-run 
    @c nebula2/update.tcl.<br>
    <br>
    After you obtain nOpenDE you need to checkout 
    <a href="http://opende.sourceforge.net">OpenDE</a> from CVS, 
    just downloading the 0.39 release will <b>NOT</b> work. Now you have two
    options, you can build OpenDE, or you can just use the prebuilt win32
    binaries supplied with nOpenDE.<br>
    <br>
    - If you want to use the prebuilt binaries, follow these steps:
       -# Add the path to the public OpenDE headers (e.g. @c path_to_ode/include) to 
          your VC Project Directories (under the Includes section).
       -# Add the path to the prebuilt binaries 
          (@c path_to_nebula2/code/contrib/nopende/lib/win32_vc_i386) to your VC
          Project Directories (under the Libraries section).
       -# Generate a config.h for OpenDE (make configure), read INSTALL in the
          OpenDE directory to find out how. Alternatively you can download my
          pre-generated <a href="http://nebuladevice.sourceforge.net/twiki/Nebula/N2TaskNOpenDE/config.h">config.h</a>
          and put it into @c path_to_ode/include/ode (but I can't guarantee it will work for everyone).
       -# You can now build any project that uses nOpenDE.
       .
    .
    - If you want to build OpenDE and OPCODE yourself, follow these steps:
       -# Add the path to the public OpenDE headers (e.g. @c path_to_ode/include) to 
          your VC Project Directories (under the Includes section).
       -# Add the path to the OpenDE lib dir (@c path_to_ode/lib)
          to your VC Project Directories (under the Libraries section).
       -# Build OPCODE, there is a VC6 dsw in @c path_to_ode/OPCODE you can use, 
          it should work in VC7+ too (just answer yes when it asks to convert it).
       -# Build OpenDE (make ode-lib), read INSTALL in the OpenDE directory to find 
          out how. You'll need to enable single precision and trimesh support. There 
          should be some project/workspace/solution files out there for VC, though
          personally I prefer the command line approach (you might need to do some
          makefile tweaking to get it to work though, and make sure you use the VC
          command prompt so the environment is properly setup to use VC for command
          line builds).
       .
    .
    To make use of nOpenDE in your source you just need to include @c opende/nopende.h.
    <br>
    
    <h2>Structure of nOpenDE</h2>
        
    -# nOpendeMarshal provides functions to convert between Nebula data types 
       (vector3, matrix44 etc.) and OpenDE data types (dVector3, dMatrix3 etc.)
    -# Functions in the nOpende namespace make use of nOpendeMarshal to provide 
       a lightweight Nebula friendly interface to the public OpenDE interface
       (i.e. all the dXXX functions you'll find in the OpenDE manual).
    -# nOpendeServer that should be created at startup and destroyed on shutdown.
    -# nRoot subclasses that encapsulate OpenDE world, geom, body, joint and space
       functions. Most of these classes provide a script interface so as to allow
       you to do some of the setup from script (the persistence functionality is 
       currently unfinished since it's not easy to persist an OpenDE simulation).
    <br>
    Usage of the nRoot subclasses is optional, you may opt to rely solely on the
    C-like interface provided by the nOpende namespace. In practice you'll probably
    find yourself making use of some of the nRoot subclasses and the nOpende namespace.
    <br>
    
    <h2>Mouse/Ray Picking</h2>
    You can mouse/ray pick geoms using the nOpendePickServer. You'll need to include
    @c opende/nopendepickserver.h to use it.<br>
    
    <h2>Learning nOpenDE</h2>
    If you want to learn to use nOpenDE you should familiarize yourself with OpenDE,
    read the manual and look through the test code. Once you've got a reasonable
    grasp of OpenDE it should be relatively easy for you to start using nOpenDE since
    nOpenDE was written with the goal of minimally wrapping OpenDE. Hopefully eventually
    there will also be a demo of nOpenDE usage.<br>
    <br>
    <br>
    <br>
    (c) 2004 Vadim Macagon
*/

