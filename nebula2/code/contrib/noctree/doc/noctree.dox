/**
@defgroup NOctreeContribModule Octree Visibility System
@ingroup NebulaContribVisibilityModules

@brief nOctTree administers a number nOctElement's, which are defined by 
position and radius (for the time being).


@par nOctree
is composed of nOctNode's, which can also contain nOctNodes. Each 
nOctElement lives in the nOctNode, in which it fits in completely. If the 
number of elements in an nOctNode exceeds an adjustable threshold, the 
nOctNode attempts to partition itself and divide the elements among the new 
sub-nodes.  However it is possible that with a set of nodes with large 
radii, that there may be more elements within a node than the threshold 
would allow.

@note
nOctree handles and culls objects as mesh based not polygon.
nOctree does not provide any methods to divide the scene or mesh into 
groups of polygons. You may modify or extend nOctree to divide  
a scene into groups of polygons but it is not a efficient way on the modern
display hardware. So it is not recommended.


@par nOctElement
is an item administered by the nOctree. They are defined by their position 
and radius, which must NOT be directly manipulated.  The position and radius 
must be updated through the nOctree::UpdateElement() because each attribute 
modification could cause the tree to be reorganized.


@par nOctNode
is an internal implementation class for nOctree.

The interface is simple: 
	- add new items to the tree with nOctree::AddElement()
	- update their position or radius with nOctree::UpdateElement()
	- remove them with nOctree::RemElement().
There are different methods for collecting a subset of the items, e.g. all 
items which are within the view volume.

*/
