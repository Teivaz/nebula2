/**
    @defgroup TclScriptServices nTclServer
    @ingroup NebulaScriptServices

    @section NebulaTclScriptOverview Overview

    nTclServer is one of the script server class sitting on
    top of Tcl/Tk. It uses the Scriptics Tcl 8.x interpreter core and
    gives us variables, control flow, math expressions, platform
    independent GUIs. 

    @section NebulaTclScriptCommands Commands

        - @b new <i>classname path</i><br>
            Create a new object of the specified class at the specified
            path in the NOH. Returns true on success and nil on failure.<br>
            <br>
            example:
@verbatim
new 'ntransformnode' 'tm'
new 'nd3d9server' '/sys/servers/gfx'
@endverbatim
            <br>
        - @b delete <i>path</i><br>
             Delete the NOH object at the specified location in the NOH. 
             Returns true on success and nil on failure.<br>
             <br>
             example:
@verbatim
delete '/usr/scene/myobject'
@endverbatim
             <br>
        - @b sel <i>path</i><br>
             Set the current working directory of the NOH to the specified
             path. Returns true on success and nil on failure.<br>
             <br>
             example:
@verbatim
sel '/sys/servers/gfx'
@endverbatim
             <br>
        - @b psel <br>
             Returns the full path of the currently selected object.<br>
             <br>
        - @b exit <br>
             Exit Nebula. Exit does not return a value.<br>
             <br>
        - @b puts <i>string</i> <br>
             Echo the provided string to the Kernel server's log handler
             chain.(only on Micro TCL)<br>
             <br>
             example:
@verbatim
puts 'fish <)))<'<br>
@endverbatim
             <br>
        - @b dir<br>
             Return a table containing the names of the children of the
             current working directory in the NOH.<br>
             <br>
        - @b exists <i>path</i><br>
             RCheck whether object exists. Return @c "1" if yes,
             return @c "0" if no.<br>
             <br>
        - @b emit <i>object.signal arg1 arg2 arg3</i><br>
             Implement signal emission (emit command).
             <br>
        - @b post <i>time object.signal arg1 arg2 arg3</i> <br>
             Post signal and commands (post command).
             <br>

    @note
    'emit' and 'post' commands are command for the signal system.
    See @ref NebulaSignals for the details.

*/
