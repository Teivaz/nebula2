/**
    @defgroup NebulaObjectSystem Object System
    @ingroup NebulaKernel

    @brief Nebula provides an object system to provide metadata for
    the scripting system.  This is a key part of what allows Nebula
    to support multiple languages with relative ease.

    @section NebulaObjectSystemNamedObjectHierarchy Named Object Hierarchy

    An instance of a class which derived from nRoot is called <b>Nebula Object</b>.
    Nebula object have a string name and it can be converted to a C++ pointer
    and back. This feature is useful for scripting and object persistency.

    Nebula objects are arranged in a hierarchy which is similiar to a filesystem.
    This is what called for <b>"Named Object Hierarchy".</b>
    One can navigate the tree of named objects within built-in command console
    (see @ref NebulaConsoleServer)and invoke script command on C++ objects.
    
    All objects of the hierarchy can be accessible through Reference Counting
    and smart-pointer(see @ref NebulaSmartPointers). 
    Either it can be easily saved and loaded by object persistent mechanism 
    provided by nPersistServer. 
    

    @section NebulaObjectSystemCreation Creation

    To use Nebula scripting interface, the class instance which you want to create 
    should be derived from nRoot class.
    All nRoot derived class should be created by nKernelServer::New with given
    <i>classname</i> and <i>objectname</i>.

    Here's an example:

    @code
    nShapeNode* node = nKernelServer::ks->New("nshapenode", "/usr/scene/node1");
    @endcode

    As mentioned above, Nebula object uses <I>className</I> and <I>objectName</I> 
    for it's creation. 'nshapenode' is classname and '/usr/scene/node1' is
    objectname in above code.

*/

