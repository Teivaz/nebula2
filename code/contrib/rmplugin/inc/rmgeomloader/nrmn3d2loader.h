//-----------------------------------------------------------------------------
//  nrmn3d2loader.h
//
//  GeometryPlugIn template file generated by Wizard
//
//  (C) 2005 Kim, Hyoun Woo.
//-----------------------------------------------------------------------------
#ifndef N_RMGEOMLOADER_PLUGIN_H
#define N_RMGEOMLOADER_PLUGIN_H

// Forward declaration:
class nRMN3d2Loader;

//-----------------------------------------------------------------------------
/**
    @class nRMN3d2Loader
    @ingroup

    @brief
    Geometry loader class declaration. This particular geometry loader's purpose 
    is to load the DirectX X meshes into RenderMonkey's model data files. 
    See SDK/Include/Core/IRmPlugIn.h for definition of IRmGeometryLoaderPlugIn.

*/
class nRMN3d2Loader : public IRmGeometryLoaderPlugIn
{
public:
    /// Constructor.
    nRMN3d2Loader();
    /// Destructor.
    virtual ~nRMN3d2Loader();

    /// @name Methods below are inherited from IRmGeometryLoaderPlugIn
    /// @{
    /// This method returns a list of file extensions that are supported by this geometry
    /// loader plug-in for importing geometry from. These values are used to control the
    /// display of files in the FileOpen dialog for model load. Note that number of entries
    /// for 'formatDescriptions' and 'formatExtensions' must match.
    ///
    /// Eg. For X file, extension = "*.X"
    ///                 text      = "X Studio File (*.X)"
    virtual void GetSupportedExtensions(RmLinkedList<RmStringT> &formatDescriptions,
                                        RmLinkedList<RmStringT> &formatExtensions);

    /// Method checks whether this plug-in can load geometry in the specified file
    /// based on its own criteria. Returns true if it can load the file and false 
    /// otherwise.
    virtual bool CanLoadGeometry(const RM_TCHAR *strFileName);

    /// This method gets called by the main application to read in geometry data from
    /// a particular file ('strFileName') into the specified model data container
    /// ('pModelContainer')
    virtual bool LoadGeometry(const RM_TCHAR *strFileName, RmMeshModelContainer *pModelContainer);

    /// This method is used to perform plug-in specific initialization
    virtual bool Init(); 
    /// This method is used to perform plug-in specific uninitialization
    virtual void Uninitialize(); 

    /// This method is used by RenderMonkey to determine what type of the plug-in this
    /// one is and what type of nodes it is supposed to be associated with. See 
    /// Wizard/Include/Core/IRmPlugIn.h for more details.
    virtual const RmPlugInDescription& GetPlugInDescription() const { return this->plugInDesc; };

    /// RenderMonkey main message handling entry point. RenderMonkey communicates
    /// all of its events with the loaded plug-ins via messages. See 
    /// Wizard/Include/Core/RmDefines.h for more details on each message.
    virtual int MessageHandler(int nMessageID,
                               int nMessageData,
                               int nMessageParameter = 0,
                               const RmPlugInID* pRmPlugInID = NULL);
    /// @}

private:
    /// Plug-in description structure
    RmPlugInDescription plugInDesc;

};
#endif
