/**
    @defgroup N2Exp4LWContribModule Exporter for Lightwave 3D
    @ingroup NebulaContribAssetToolchainModules
    @brief Basic Nebula 2 exporter for Lightwave 3D currently in development.
    
    <h2>Introduction</h2>
    This exporter isn't meant to do everything the Nebula 2 Toolkit for Maya,
    or the Nebula 2 Max Toolbox can do. The purpose of this exporter is simply
    to get art assets out of Lightwave, with minimal additional fluff. The
    idea being that whatever the exporter outputs can then be used within a
    standalone level building tool. This approach is somewhat different to
    that taken by the Maya toolkit (and soon perhaps the Max toolbox) which 
    aims to turn Maya into a level building tool. Why the difference? Well,
    simply put the Lightwave SDK is a poorly documented and thus unpredictable
    PITA, the UI system being one of the more horrible parts (which is why 
    the exporter relies on WxWidgets for most of it's dialogs). So building
    a level editor into Lightwave did not appeal to me one bit.
    
    <h2>Installation</h2>
    The end user installation is handled by an installer that can be 
    downloaded from http://www.nebuladevice.org/downloads/
    
    <h2>Building the Source</h2>
    The main complication with building the source is that you need to build
    wxWidgets first. The exporter uses the static wxWidgets libs, which 
    unfortunately you can't download, can't remember whether it was because
    they only distribute DLLs or because they use a different run-time 
    library, perhaps both. So the steps to build the source using 
    Visual C++ 2002 and later are roughly as follows...
    - Download and install the Lightwave SDK (I use version 8, anything from
      7.5c might work ok too), you need to add the path to the SDK include 
      dir to your VC Project Directories (under the Includes section).
    - Download the wxWidgets source (I use version 2.6.1) and add the path
      to the include dir to your VC Project Directories (under the Includes 
      section).
    - Open VC 6 workspace at @c wxwidgets_source_path/build/msw/wx.dsw in
      VC 7+, it will prompt you to convert it to an .sln so go ahead and do
      that.
    - Right-click on the wx solution in Solution Explorer and select
      Configuration Manager, create 2 new configurations 
      "Release Multi-Threaded" and "Debug Multi-Threaded", based on the
      existing "Release" and "Debug" configurations respectively.
    - The only thing you need to change for the new "Release Multi-Threaded" 
      configuration is the Runtime Library. So you need to right-click on a 
      project in the Solution Explorer and select Properties, under
      "Configuration Properties->C/C++->Code Generation" change the
      Runtime Library to "Multi-threaded". Repeat for all the other
      projects in the solution.
    - Make a similar change for the "Debug Multi-Threaded" configuration,
      except that in this case change the Runtime Library to 
      "Multi-threaded Debug".
    - Build the wx solution, actually the exporter only needs the base, core 
      and adv libraries so you could try building only those, you may want/need 
      to mess with the config header as well. The static libs should be generated 
      at @c wxwidgets_source_path/lib/vc_lib so after you manage to build them 
      add this path to your VC Project Directories (under the Libraries section).
    - Use the Nebula 2 build system (update.py) to generate the .sln for the
      exporter and you should be all set to build it.
      
    <h2>Architecture, Features and the Future</h2>
    Design? Pfffft. I don't need no stinking design. The code is a bit of a
    mess right now. I was unfamiliar with the Lightwave SDK when I started this so 
    I ended up working a lot of things out by trial and error, and putting in more
    effort into getting the right results out than worrying about the code looking
    nice. It's not the most horrible thing ever, you shouldn't have too much trouble
    following it and working out how the plugins interact, but I would definitely
    like to clean it up sometime in the future. And um, document the interaction
    between the plugins.
    <br>
    Feature wise, the next "major" I'll be working on is probably support for 
    exporting data for stencil shadows, unless some other shadow solution comes 
    along before I get to it.
    
    <h2>License</h2>
    The exporter code is covered by the standard Nebula 2 license you can find
    here http://nebuladevice.cubik.org/license/
    
    <br>
    <br>
    <br>
    (c) 2006 Vadim Macagon
*/

