/**
    @defgroup NebulaScriptAutoWrapper Automatic scripting wrappers
    @ingroup NebulaScriptServices

    @brief nCmdProtoNativeCPP classes are used to make easier thet definition of the script
    commands in Nebula classes (programmed in C++). It avoids to have to program
    the wrapper manually in plain C language. It does not add any incompatibility.
    Main features:

    - Avoid to code script wrapper C functions (files *_cmds.cc), with no penalty
    for C++ calls.
    
    - Calculates automatically the signature of the function for you.
    
    - Calculates automatically a fourcc for you in the case zero is specified as 
    fourcc. In this case, a CRC is used, it makes possible to collide but improbable. 
    
    - Handles nicely a lot of types, and new types can be added for input arguments 
    and output results. All basic types (void, float, int, bool, string, nRoot have 
    been added) and common types (like vector2, vector3, vector4) are already 
    defined.

    @section Usage

    Although the implementation is a bit tricky, the usage of this is quite 
    simple. Imagine you want to make a C++ member function scriptable in your 
    nObject/nRoot, just use the NCMDPROTONATIVECPP_DECLARE macros explained below 
    in the header file (inside the class definition). Remember to surround all the
    declarations between NCMDPROTONATIVECPP_DECLARE_BEGIN and NCMDPROTONATIVECPP_DECLARE_END.    
    For each scripting command you want to define use the proper macro depending
    on the case (no arguments, input, output, input / output arguments):    
    
    - @see NCMDPROTONATIVECPP_DECLARE: valid for all cases.
    - @see NCMDPROTONATIVECPP_DECLARE_NOARG: for functions without arguments.
    - @see NCMDPROTONATIVECPP_DECLARE_INARG: for functions with input arguments.
    - @see NCMDPROTONATIVECPP_DECLARE_OUTARG: for functions with output arguments.
    - @see NCMDPROTONATIVECPP_DECLARE_INOUTARG: for functions with input & output arguments.

    For const member functions just append const after the end of the macro declaration.

    @section Examples

    Don't declare the C++ member function prototype in the header file, instead 
    use the NCMDPROTONATIVECPP_DECLARE macros. See these examples:

@code
    NCMDPROTONATIVECPP_DECLARE_BEGIN(nTransformNode);
    
        // Here all the NCMDPROTONATIVECPP_DECLARE_ macros
        
    NCMDPROTONATIVECPP_DECLARE_END(nTransformNode);
@endcode
    
    Some example sof NCMDPROTONATIVECPP_DECLARE macros:
    
@code
    NCMDPROTONATIVECPP_DECLARE_INARG(0, void, SetActive, 1, (bool));
    // void SetActive(bool);

    NCMDPROTONATIVECPP_DECLARE_NOARG(0, bool, GetActive) const;
    // bool GetActive(void) const;

    NCMDPROTONATIVECPP_DECLARE_INARG(0, bool, SetPosition, 1, (vector3 &));
    // bool SetPosition(vector3 &)

    NCMDPROTONATIVECPP_DECLARE_NOARG(0, vector3 &, GetPosition) const;
    // vector3 & GetPosition(void) const;

    NCMDPROTONATIVECPP_DECLARE_INARG(0, vector3 &, AddPosKey, 2, (float, const vector3 &))
    // vector3 & AddPosKey(float, const vector3 &);
@endcode    

    Sometimes is needed to declare functions with out arguments. Example:

@code
    NCMDPROTONATIVECPP_DECLARE_INOUTARG(0, vector3 &, GetPosition, 1, (int), 2, (float &, vector3 &))
    // void GetScaleKeyAt (int index, float &time, vector3 &key) const  
@endcode

    @note Dependencies

    It has one dependency from an external libraries, the Loki library developed
    by the great Andrei Alexandrescu (http://sourceforge.net/projects/loki-lib/).

*/
