/**
    @defgroup RenderPath Render Path Subsystem
    @ingroup Gfx2
    @ingroup Scene

      - @ref NebulaRenderPathOverview
      - @ref NebulaRenderPathCreating
      - @ref NebulaRenderPathElements

    @section NebulaRenderPathOverview Overview

    Nebula render path system provides a flexible and intuitive way to define
    rendering passes to render a scene.

    The render tagets and passes are all configurable in a renderpath file.
    The renderpath is completely setup by an Xml file and can be easily changed, 
    you could also create your own or use some of the other examples that 
    come with Nebula2. Have a look at the renderpath files in 
    <tt>nebula2/data/shaders/</tt>.

    The followings are default renderpath files which live in 
    <tt>nebula2/data/shaders/</tt>:

      - dx9hdr - dx9hdr_renderpath.xml
      - dx9 - dx9_renderpath.xml
      - dx7 - dx7_renderpath.xml

    The <b>dx9hdr</b> is default renderpath and it is used if the system
    can use shader 2.0.
    It does HDR(High Dynamic Range) lighing for its scene lighting model.

    To give you an idea of what is going on, here are the steps that 
    are taken to render each frame:
  
       - Render the scene into a floating point texture
       - Copy that scene texture into another smaller floating point texture
         and do a brightpass filter
       - Copy the filtered scene texture through 4 other textures to do the
         blur effect
       - Copy the scene texture into another texture for alpha textures
       - Render alpha objects into the alpha texture
       - Compose the scene, the blurred scene and the alpha scene into the
         frame buffer while handling saturation, luminance, balance and bloom
         scale.
  
    As you can see that's a lot of render to texture operations, some to
    floating point textures and a fair bit of pixel shader operations
    going on - and that's without even talking about what the object's
    shaders are doing. So the framerate can be lower than you've expected but 
    ~35fps is probably not bad for an ATI 9600.

    The <b>dx9</b> renderpath that doesn't use floating point textures but 
    still manages a fake HDR style glow effect.

    The dx7 featureset would switch to the <b>dx7</b> renderpath that just  
    renders the object straight to the frame buffer.

    As mentioned above, you can create your own renderpath besides those
    three renderpaths if it is necessary.


    @section NebulaRenderPathCreating Creating RenderTarget and RenderPass

    The render targets and rendering passes are defined in a xml file which should
    be set by calling nSceneServer::SetRenderPathFilename() function when an 
    application startup.

    @note
    See <tt>'data/scripts/startup.tcl'</tt> how this is specified within a script file.

    The xml file can be divided two sections, one for definition section and the
    other for rendering path section. See the following:
@verbatim
    ...
    <!-- definition sections -->
    define render taergets
    define some variables

    <!-- rendering pass sections -->
    define each rendering passes
    ...
@endverbatim
    The Render targets which uses for each of the rendering pass can be defined in
    the definition sections with <b>RenderTarget</b> element. And each of the 
    variables can be defined in the similiar way with its proper element. 
    (All elements are explained in @ref NebulaRenderPathElements section) 

    The rendering passes are defined in rendering pass section according
    to its rendering order in a scene server.
 
    Each of the pass can have several phases for its child elements and
    each of the phase can have several sequences in the same maner.
    The followings are what the elements means:

      - <b>Pass</b> represents a pass in a render target. 
                      Each of defined render target has its own render pass.
      - <b>Phase</b> specifies common render state for sequence shaders.
      - <b>Sequence</b> defines the shader states for mesh rendering.

    All these rendering targets and rendering passes are defined for a element of 
    a xml file. 

    @note
    See the <tt>dx7_renderpath.xml</tt>, <tt>dx9_renderpath.xml</tt> or 
    <tt>dx9hdr_renderpath.xml</tt> files in <tt>'data/shaders/'</tt> directory 
    for an example.

    The following section explains the details of the each elements. 


    @section NebulaRenderPathElements Render Path Elements

    A render path is defined by xml file in <tt>data/shaders</tt> directory
    and the xml file is consist of several elements for the render path system.

    The first element in the file is <b>RenderPath</b> and it can have the following
    attributes: 
      - <b>name</b> - RenderPath element name
      - <b>shaderpath</b> - represents directory path of the shader files.
                            e.g. 'home:data/shaders/2.0'

    A <b>RenderPaht</b> element can have the following elements for its children:
      - <b>RenderTarget</b> - repesents renering target for a rendering pass.
      - <b>Float</b> - repesents float variable
      - <b>Float4</b> - repesents float4 variable
      - <b>Int</b> -  repesents int variable
      - <b>Texture</b> - repesents texture variable
      - <b>Pass</b> -  repesents render pass

    A <b>Pass</b> element can have the followings for its attributes:
      - <b>name</b> - Pass element name 
      - <b>shader</b> - defines effect files which will be used for this pass
      - <b>renderTarget</b> - defines render tagert name for this pass.
                              One of the name of the defined render target name should
                              be defined.
      - <b>clearColor</b> - RGBA color value which will be used for clear stage(<i>optional</i>)
      - <b>clearDepth</b> - (<i>optional</i>)
      - <b>clearStencil</b> - (<i>optional</i>)
      - <b>drawQuad</b> - has 'Yes' or 'No' for its value. (<i>optional</i>)
      - <b>drawShadowVolumes</b> - has 'Yes' or 'No' for its value. (<i>optional</i>)
      - <b>drawGui</b> - has 'Yes' or 'No' for its value. (<i>optional</i>)
      - <b>technique</b> - defines a technique name. The technique should be one of the
                           techniques in effect file which defined in shader
                           attribute. (<i>optional</i>)
      - <b>shadowEnabledCondition</b> - (<i>optional</i>)
    
    A <b>Pass</b> element can have several <b>Phase</b> elements for its children.

    A <b>Phase</b> element can have the followings for its attributes:
      - <b>name</b> - Phase element name. 
      - <b>shader</b> - defines effect files which will be used for this phase.
      - <b>forcc</b> - forcc values for the Phase.
      - <b>sort</b> - represents the sort order. It has 'FrontToBack' or 'BackToFront' for its value.
      - <b>lights</b> - has 'On' or 'Off' for its value.
      - <b>technique</b> - defines a technique name. The technique should be one of the
                           techniques in the effect file which defined in the shader 
                           attribute. (<i>optional</i>)

    A <b>Phase</b> element can have several <b>Sequence</b> elements for its child and
    the sequence element can have the followings for its attribute:
      - <b>shader</b> - defines effect files which will be used for the sequence.

*/
