/**
    @defgroup Resource Resource System

    This section of the documentation covers Nebula resource system and 
    extending of it.

      - @ref NebulaResourceSystemOverview
      - @ref NebulaResourceSystemCustomResource
      - @ref NebulaResourceSystemLoadingBehavior
      - @ref NebulaResourceSystemCreateResource

    @section NebulaResourceSystemOverview Overview

    The Nebula resource system stores resource data(meshes, textures, shaders,
    animation data, sound data etc.) and provides centeral place to manage it.   
    Though the resource system, Nebula provides powerful and smart way of 
    a loading and creation of a resource.

    All resource classes are derived from nResource class and nResourceServer
    manages those resources as it does loading, finding and some other tasks for 
    resources.

    See nResource page to see all supported resource types and each page of the
    subclass of nResource class to see more details. 


    @section NebulaResourceSystemCustomResource Defining user custom type resource class

    You can create your own resource type by subclassing nResource class.
    After deriving your own class from nResource class then you should override 
    nResource::LoadResource() function which actually load resource.

    Also your subclass should override nResource::CanLoadAsync() function to 
    determine its loading behavior whether it loads its data asynchronously or not.
    See the next @ref NebulaResourceSystemLoadingBehavior section for more its 
    details.

    @code
// Derive your class from nResource class
class nMyResource : public nResource
{
public:
    ...
    virtual bool CanLoadAsync() const;  
    ...
protected:
    ...
    // Overide LoadResource() function which actually load  
    // your custom resource data.
    virtual bool LoadResource(); 
    ...
};
    @endcode


    @section NebulaResourceSystemLoadingBehavior Loading Behavior

    esources are mostly loaded from a file, can be shared, 
    and unloaded to free runtime space.
    They are managed by a central resource server.

    The nResource class provides an interface for asynchronous loading
    (loading resources in a background thread). Not all subclasses must
    support asynchronous resource loading though.

    Default behaviour is synchronous loading (nResource::Load() returns when the
    resource has been loaded). Asynchronous loading is enabled by
    calling SetAsyncEnabled(true). When async loading is enabled,
    nResource::Load() returns immediately with a return value of true but 
    nResource::IsValid() will return false until the resource has actually
    been loaded at some point in the future.

    To check whether a resource loading request has been issued at
    some point in the past which has not been fullfilled yet, call
    the nResource::IsPending() method. IsPending() returns true after an async
    call to Load() and before IsValid() returns true to indicate the
    the resource is available. In all other cases, nResource::IsPending() returns
    false.

    Unloading resources always happend immediately, both in sync and
    async mode.

    A resource object can be in one of the following states:

    - <b>Unloaded:</b> The resource is not currently loaded, resource 
      object are in this state before Load() and after Unload()

    - <b>Valid:</b> The resource object has been loaded and is in a
      valid state to be used.

    - <b>Lost:</b> The resource has been loaded at some time in the
      past, but is currently in a Lost state, so that it can't be used.
      This can happen for D3D-controlled resources which are not placed
      in D3D's managed resource pool. Usually, applications don't need to 
      be concerned about lost state, since no rendering will be performend
      while the application is in a lost state.

    - <b>Empty:</b> The resource has been initialized, but has not been filled
      with valid data. This is usually only of interest for special types of
      resources which are not loaded from disk resource files, but are filled
      by application code with data. This includes for instance procedurally
      generated meshes and textures. In general, only resources which are not
      provided with a filename can enter the Empty state. The code which uses
      the resources must check the resource for Empty state each frame before
      using the resource, and if the resource is in Empty state, initialize
      the contents of the resource, and set the resource to Valid state.

    Only resources which cannot initializes themselves from a file can go into
    Empty state, for those resources, Empty state will be entered after initializing
    the resource by calling Load(), or for resources which can go into Lost state,
    if a fullscreen application loses focus (for instance through Alt-TAB).

    Resources which don't know how to load themselves may remain in Unloaded state
    after the display has been closed and opened (this happens for instance
    on Alt-RETURN).

    For the general case (meshes and textures which load themselves from files),
    all resource management happens automatically. Special cases (where resources
    are not loaded from normal resource files) should check for 
    Empty or Unloaded state before using the resources, and initialize, or load 
    the resources manually (don't forget to set the resource to Valid state afterwards). 

    This should only be of concern for programmers which extend Nebula2 itself.
    Client applications should NEVER have to deal with any type of 
    low level resource management.

    Also check out the nResourceLoader class, this is a very clean way to handle
    custom initialization of resources without having to check manually for an invalid
    state. If a resource loader is attached to a resource object, it will be responsible
    for loading and unloading the resource. Subsystems which do their own resource management
    may derive subclasses from nResourceLoader.


    @section NebulaResourceSystemCreateResource Creation of Platform Specific Resources
    
    When you create class instance of nResource derived class you should be 
    careful not to directly create it by calling nKernelServer::New(). 
    Some type of resources which are platform specific like nTexture2, nMesh2,
    nShader2 are should be created from nGfxServer2.

    For example, creation of nTexture2 instance by calling nKernelServer2::New() 
    will not create correct nTexture2 object instance.
    So there will be error on loading given texture.

    Wrong:
    @code
nTexture2* tex = nKernelServer::Instance()->New("ntexture", "/textures/tex0");
tex->SetFilename("data:textures/tex0");
tex->Load();
    @endcode
    
    Correct:
    @code
nTexture2* tex = nGfxServer2::Instance()->NewTexture("tex0");
tex->SetFilename("data:textures/tex0");
tex->Load();
    @endcode

*/
