/**
@defgroup PythonScriptServices nPythonServer
@ingroup NebulaContribLanguageModules
@brief 
nPythonServer provides Python based scripting services for Nebula.

Python Integration Documentation
Created 2001, by Jason L. Asbahr, jason@asbahr.com

<h2>Introduction</h2>

npython is an extension which integrates Python into the
Nebula Device and exposes the functionality of Nebula to Python.
npython can be invoked from inside the standard Nebula utilities
nsh and gfxserv, in addition, npython can be imported directly
into Python as an extension module.

<h2>To Build</h2>

Windows:
  - Execute updsrc.tcl to build makefiles.
  - Compile with 'make' or DevStudio.  In DevStudio, you will need
    to explicitly select the npython project to be built as it won't
    be built as a dependency of @c nsh.

Linux:
  - Build as usual
  - Add a symlink from @c $NEBULADIR/bin/linuxd/libnpython.so to
    @c $NEBULADIR/bin/linuxd/npython.so
  - Don't forget to add @c $NEBULADIR/bin/linuxd to @c $LD_LIBRARY_PATH
  - Do the same for @c $NEBULADIR/bin/linux if using a release build.

<h2>To Use</h2>

To use Python in the Nebula utilities:

@verbatim
  nsh -script npythonserver
  gfxserv -script npythonserver
@endverbatim

To use Nebula from Python, simply:

@verbatim
  >>> import npython
@endverbatim

To use Nebula from Python on Linux, be sure that you've created the symlinks
as described above.

<h2>Commands</h2>

npython currently exposes a set of functions to manipulate and control
the Nebula Device.  All functions take arguments formated as strings.

@note  These commands are based on those commands available via Tcl,
       with a couple differences.  For example, @c 'dir' has been renamed
       @c 'ndir', and a new command @c 'set' has been introduced to allow
       invocation of methods on Nebula objects.

@code
    new( [class], [path] )
@endcode

    Create a new object of class @c [class] with the name
    @c [path]. Name may be any valid path, missing path
    components will be filled up with 'nroot' objects.
    Returns the complete path name of the new object.

@code
    delete( [path] )
@endcode

    Delete the object with name @c [path] and all of its
    sub objects.

@code
    ndir()
@endcode

    %List contents of current 'directory'.

@code
    sel( [path] )
@endcode

    Make the object defined by @c [path] the current object.
    Returns the complete path of the selected object.

@code
    psel()
@endcode

    Returns the full path of the currently selected object.

@code
    exists( [path] )
@endcode

    Check whether object exists. Return @c "1" if yes,
    return @c "0" if no.

@code
    get( [script] )
@endcode

    Read a serialized object from the 'real' filesystem.
    The serialized object must have been created with
    the @c '.save' or @c '.saveas' object command.
    Returns the full path of the created object.

@code
    exit()
@endcode

    End the npython session.

<h2>Simple Example</h2>

@code
    new('nroot', 'myObject')
@endcode

    This will create a new object of class @c 'nroot' which has the
    name @c 'myObject'.

@code
    sel('myObject')
@endcode

    This makes @c 'myObject' the current object. @c 'sel' just works like
    @c 'cd' in an ordinary shell, except that it selects the current object,
    not the current working directory in the filesystem.

@code
    set('getcmds')
@endcode

    This invokes the method @c 'getcmds' on @c 'myObject', which
    will return a list of all command prototypes that @c 'myObject'
    accepts.

@code
    sel('..')
@endcode

    Go back to the root object.

<h2> Testing </h2>

From the command line in <tt>bin/win32</tt> or <tt>bin/win32d</tt> type:

@verbatim
    nshpython -scriptserver npythonserver 
@endverbatim

And test some commands whatever you want to.

*/
---
EOF
