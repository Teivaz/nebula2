/**
@defgroup NWrapperContribModule nwrapper Contributed Module
@ingroup NebulaContribModules
@brief nwrapper helps generate language-specific wrappers around the Nebula
scripting interface.

<h2>Compilation</h2>

To compile nwrapper, you will need to add the following targets to your
workspace:

   - @c nlangwrapperlib
   - @c nwrapperapp

You will also need to build an executable that has linked against and loaded
all of the packages whose script interface you want to have wrapped.  There
are 2 of these by default in the nwrapper distribution:

   - @c ncorewrapper  - This will only wrap Core Nebula 2.
   - @c nsamplewrapper  - This is what we consider to be a more typical
     configuration and wraps a range of contrib modules in addition to
     Core Nebula 2, that will also need to be added to your build
     configuration:
      - @c nlua (@ref NLuaServerContribModule)
      - @c nopende (@ref NOpenDEContribModule)
      - @c nclodterrain (@ref NCLODTerrainContribModule)

It is very likely that you will need to create your own wrapper executable
configuration.  In this case, looking at the differences between the
@c ncorewrapper and the @c nsamplewrapper should be instructive.


Once you have added the required targets (and their dependencies) to your
workspace, re-run @c update.tcl.

After the workspaces have been successfully generated, open your workspace
and build the executable target that you added (@c ncorewrapper,
@c nsamplewrapper, or your own).

<h2>Usage</h2>

After you've successfully compiled nwrapper, you should see the usage
instructions for the particular language that you wish to use.

For now, this is likely to be Java, so see @ref NJavaContribModule.

<h2>Extending</h2>

To support an additional language, you will need to create a new
subclass of nLanguageWrapper and implement 3 methods:

   - @c nLanguageWrapper::OpenClass(nClass *)
   - @c nLanguageWrapper::CloseClass(nClass *)
   - @c nLanguageWrapper::WriteCommand(nClass *, nCmdProto *)

The default implementation of these methods demonstrates how to extract
all of the required information and prints it out in a non-language specific
manner.  There are two subclasses currently which demonstrate how to use it
in a real-world setting:

   - nJavaLanguageWrapper
   - nDotNetLanguageWrapper (alpha quality)

*/

