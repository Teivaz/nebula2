/**
@defgroup NJavaContribModule nJava
@ingroup NebulaContribLanguageModules
@brief nJava provides access to the Nebula script API from within Java.

<h2>Status</h2>

This is currently unmaintained.

<h2>Compilation</h2>

First, the @ref NWrapperContribModule must be built.  This will provide you
with an executable that can generate wrappers.  For the purposes of this
documentation, we will refer to the executable as @c ncorewrapper.exe
but it could just as well be @c nsamplewrapper.exe or something else.
By default, this installs into the @c nebula2/bin/win32 or
@c nebula2/bin/win32d directories, but we will assume that the appropriate
directory is already in your system path.

Once you have this built, you go to the @c nebula2/code/contrib/njava
directory via the command line.  From here, you will run @c ncorewrapper.exe,
telling it to use the nJavaLanguageWrapper backend:

@verbatim
  ncorewrapper.exe -backend njavalanguagewrapper
@endverbatim

This will then proceed to generate Java output for each wrapped class, as well
as @c nebulajava.cc and @c nebulajava.h files.

Now, back in your IDE, you need to build the @c nebula2java project.  This will
create @c nebula2java.dll on Windows, which contains all of the necessary
native code and JNI wrappers.  If you're using something other than
@c ncorewrapper.exe with additional modules built in and wrapped, you will
need to modify the @c nebula2java target in the @c njava/bldfiles/njava.bld
file and recompile/re-link @c nebula2java.dll.

At this point, you can take the generated Java sources and the DLL and use
them however you like.

*/

