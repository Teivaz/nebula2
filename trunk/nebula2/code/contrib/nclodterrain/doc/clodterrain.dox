/**
    @defgroup nCLODTerrain Chunked LOD terrain Contributed Module
    @ingroup NebulaContribModules
    @brief nCLODTerrain implements a chunked LOD terrain renderer
    
    <h2>Introduction</h2>
    This module holds the implementation for nCLODShapeNode, which
    will load in and render a chunked LOD terrain representation.
    Both vertex meshes and terrain textures are dynamically loaded
    and rendered to preserve a maximum allowed screen error in display
    of the terrain.  Vertex meshes are "morphed" to reduce the popping
    effect seen when switching between different LOD levels.  Both the
    terrain vertex meshes and textures are precompiled from a heightfield
    and diffuse texture.

    Also included in the CLODTerrain module are construction nodes.
    The class nCLODChunkerNode will build up a quadtree of vertex
    chunks, and nCLODTQTMakerNode will build a texture quadtree of
    terrain texture tiles from a single (usually huge) texture the
    represents the entire terrain.

    <h2>Usage</h2>

    First, note that the terrains generated are in the x/y plane, and heights
    are mapped to the z axis.

    To start with, you need the terrain data: this includes

    - A heightfield, typically a bitmap of size N x N, where N is some power of 2.
    - A diffuse texture, typically a bitmap two or three times the size of the eheightfield bitmap.

    Next you need to decide what the x/y/z scale is of the terrain you are generating.
    Basically, you are determining the size of each pixel in the heightfield
    bitmap, and what the scale value to use to generate heights from the
    pixel values.  If you're using an 8 bit heightfield of size 1024x1024, for
    example, you could set the x,y, and z scales to 1, producing a terrain
    of size 1024 nebula units in the x/y direction and varying from 0-255
    in height.  You can vary these scales if needed to stretch out the
    terrain; typically I crank up the z scale if I'm using large terrains and
    only have the 0-255 height range to work with.

    You also need to decide the size of your texture tiles; this can be
    any power of two from 8 to 512.

    Next, you need to create a script that will compile the heightmap and
    texture into file usable by nCLODShapeNode.  These two files are:

    - a .chu file (such as example.chu) that contains the compiled vertex mesh chunks
    - a .tqt file (such as example.tqt) that contains the compiled texture tiles

    Some example lua code to do the chunking:

@code
--
-- build a chunker node and configure it
--

new('nclodchunker','/usr/chunker')
chunker = nebula.usr.chunker
chunker:setchunkfilename('home:export/terrains/examples/sample.clod')
chunker:setspacings(0.5,0.5,0.5)
chunker:setchunkparameters(tree_depth, space_error)
chunker:setvalidateflag(true)

-- do the chunking...

chunker:compilechunksfromfile('home:work/textures/heightfield.bmp')

@endcode

   And more code to generate the terrain texture tiles:

@code
-- Build tqt data file as well
new('nclodtqtmaker','/usr/tqtcompiler')
tqtcompiler = nebula.usr.tqtcompiler
tqtcompiler:settqtparameters(tree_depth, tqt_tilesize)
tqtcompiler:settqtfilename('home:export/terrains/examples/sample.tqt')
tqtcompiler:compiletqtfromfile('home:work/textures/cloddiffuse.tga')

@endcode
    (c) 2004 Gary Haussmann
*/

