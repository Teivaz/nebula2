/**
    @defgroup NebulaGuiSystem Graphical User Interface

    This section of the documentation covers the Nebula GUI system that
    can be used to create an in-game graphical user interface.

    @section NebulaGuiSystemInitialize Initialization and Rendering

    The first thing step in initalizing the GUI system is to specify the
    root path of the GUI system. This root path is where the created GUI
    widgets live.  It is set by calling nGuiServer::SetRootPath().
    If you do not explicitly set the root path, it will be set on
    @c '/res/gui' by default.

    Next, call nGuiServer::Open() to initialize GUI system.

    @code
guiServer->SetRootPath("/gui")
guiServer->Open();
    @endcode

    nGuiServer::Open() internally calls nScriptServer::RunScript() and runs
    the script @c 'OnGuiServerOpen'. So the @c OnGuiServerOpen script
    should be defined before nGuiServer::Open() is called if you want to do
    some of your own initialization for the GUI system.

    The @c 'OnGuiServerClose' script is called by nGuiServer::Close() in
    the same manner.

    A default root window named @c 'SystemRootWindow' is created
    by nGuiServer::Open(). All windows created by the programmer will
    be located under this root window.

    You can hide all windows by passing @c 0 to nGuiServer::SetRootWindow():

    @code
guiServer->SetRootWindow(0);
    @endcode

    or with the script form:

    @verbatim
/>sel /sys/servers/gui
/sys/servers/gui>.setrootwindow ""
    @endverbatim

    To render GUI windows, you should call nGuiServer::Trigger() and
    nGuiServer::Render() in your rendering loop.

    @code
// render loop
...
guiServer->Trigger();
...
if (sceneServer->BeginScene(viewMatrix))
{
    ...
    sceneServer->EndScene();
    ...
    guiServer->Render();
    ...
    sceneServer->PresentScene();
}
    @endcode

    Call nGuiServer::Trigger() as with all other Nebula servers.
    Call nGuiServer::Render() after rendering the scene. This will
    render the GUI on top of the rendered scene.

    You should call nGuiServer::Close() when the application is closed.

    @code
guiServer->Close();
    @endcode

    Lastly, release the GUI server by calling its Release() member function.

    @code
guiServer->Release();
    @endcode

    @section NebulaGuiSystemSkin Setting up the Skin

    To use GUI system, you should create its skin first.
    Usually it is good to create and define a skin in the
    @c OnGuiServerOpen script.  The default @c startup.tcl (and
    the @c startup.lua scripts that come with some of the contribs)
    provide examples of how to configure a skin.  The skin is defined
    via script to make it easily editable.

    You can create a skin by calling nGuiServer::NewSkin() with a given
    skin name.

    @code
// 'system' is skin name.
skin = guiServer->NewSkin("system");
    @endcode

    Then specify a path of the skin texture and its file extension.

    @code
skin->SetTexturePrefix("home:export/textures/system/");
skin->SetTexturePostfix(".dds");
    @endcode

    A Skin also needs to specify its color for when it is active and
    inactive.

    @code
skin->SetActiveWindowColor(1.0, 1.0, 1.0, 0.9);
skin->SetInactiveWindowColor(0.6, 0.6, 0.6, 0.6);
    @endcode

    Finally, register brush to be used in the skin.  See nGuiSkin::AddBrush()
    for more details on the arguments.

    @code
skin->BeginBrushes()
skin->AddBrush("titlebar", "skin",  0, 52, 43, 20, 1.0, 1.0, 1.0, 1.0)
skin->AddBrush("window",   "skin",  0, 77, 15, 13, 1.0, 1.0, 1.0, 1.0)
skin->EndBrushes()
    @endcode


    @section NebulaGuiSystemCreateWindow Creating a Window

    This section provides a brief example of creating a window on console
    to make it easier to understand Nebula GUI system.

    You can create a window by calling nGuiServer::NewWindow() with a given
    class name specifying the type of window to create.

    Run @c nviewer.exe and type this on it's console:

    @verbatim
/>sel /sys/servers/gui
/sys/servers/gui>.newwindow nguiclientwindow true
    @endverbatim

    or on C++:

    @code
nGuiClientWindow* wnd = (nGuiClientWindow*)guiServer->NewWindow("nguiclientwindow", true);
    @endcode

    The above code create a window of nGuiClientWindow type under the
    root window, @c 'SystemRootWindow'.  The name of the created window
    is automatically assigned by nGuiServer when it is created by
    calling nGuiServer::NewWindow().  The first window is @c 'window0',
    the second is @c 'window1', and so on.

    Windows of the type nGuiClientWindow have Titlebar, CloseButton,
    SizeButton and Layout elements by default.

    You can check this by typing @c 'dir' command under the created window:

    @verbatim
/gui/SystemRootWindow/window3>dir
TitleBar CloseButton SizeButton Layout
/gui/SystemRootWindow/window3>
    @endverbatim

    If you want to add a button or some other GUI element as a child of that
    window, you must create those widgets under the Layout node.

    @verbatim
/gui/SystemRootWindow/window3>sel Layout
/gui/SystemRootWindow/window3/Layout>new nguibutton mybutton
/gui/SystemRootWindow/window3/Layout>sel mybutton
/gui/SystemRootWindow/window3/Layout/mybutton>.setdefaultbrush terminal_n
/gui/SystemRootWindow/window3/Layout/mybutton>.setpressedbrush terminal_p
/gui/SystemRootWindow/window3/Layout/mybutton>.sethighlightbrush terminal_h
/gui/SystemRootWindow/window3/Layout/mybutton>.settooltip test
/gui/SystemRootWindow/window3/Layout/mybutton>sel ..
/gui/SystemRootWindow/window3/Layout>.attachform mybutton left 0.0
/gui/SystemRootWindow/window3/Layout>.attachform mybutton top 0.0
/gui/SystemRootWindow/window3/Layout>.attachform mybutton bottom 0.0
/gui/SystemRootWindow/window3/Layout>.attachpos mybutton right 0.3
/gui/SystemRootWindow/window3/Layout>sel .. 
/gui/SystemRootWindow/window3>.updatelayout
    @endverbatim

    or on C++:

    @code
nGuiButton* btn;
btn = (nGuiButton*) kernelServer->New("nguibutton", "mybutton");

// the brushes terminal_n, terminal_p and terminal_h should be
// aleady defined when a skin is created.
btn->SetDefaultBrush("terminal_n");
btn->SetPressedBrush("terminal_p");
btn->SetHighlightBrush("terminal_h");
btn->SetTooltip("Button Test");
layout->AttachForm(btn, nGuiFormLayout::Left, 0.0f);
layout->AttachForm(btn, nGuiFormLayout::Top, 0.0f);
layout->AttachForm(btn, nGuiFormLayout::Bottom, 0.0f);
// assume btnSize is 0.3
layout->AttachPos(btn, nGuiFormLayout::Right, 1 * btnSize);
// update window's layout
wnd->UpdateLayout(wnd->GetRect());
    @endcode

    nGuiWidget and all classes that derived from it have four states:
     - Normal
     - Pressed
     - Highlight
     - Disabled

    When the widget is created, you should specify all of the brush states
    by calling:
     - nGuiWidget::SetDefaultBrush()
     - nGuiWidget::SetPressedBrush()
     - nGuiWidget::SetHighlightBrush()
     - nGuiWidget::SetDisabledBrush()

    If you do not that, the button will be not shown on the window.

    nGuiFormLayout is used to provide a flexible layout scheme.
    It provides relative positioning of child elements.  The created
    @c 'mybutton' has its left, top and bottom edges aligned with the form.
    Its right edge is placed at 30% of the width of the form.

    Call the @c 'updatelayout' script method or the C++ method 
    @c nGuiClientWindow::UpdateLayout() on the button to update the position
    and size of the window.
    
*/
