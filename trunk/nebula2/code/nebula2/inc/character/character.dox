/**
    @defgroup NebulaCharacterAnimationSystem Character Animation Subsystem
    @ingroup NebulaAnimationSystem
    @brief A high-performance skinned mesh renderer with multiple
    animation clips per state and blending between different states.


    @section NebulaCharAnimIntro Introduction
    
    Nebula2 uses a palette-skinning vertex shader to perform skinning. This is 
    the most effective way to do skinning on the Win32 and Xbox platforms.

    The Nebula2 character animation system...

      - uses vertex shaders for skinning (faster than CPU based skinning)
      - supports unlimited number of skeleton joints and up to 4 influences per vertex
      - fully supports joint translation, rotation and scaling
      - provides a way to access a skeleton joint's transform via nAttachmentNode 
        (this can be useful for attaching a sword to a character's hand for instance)

    Generally a script to setup an animated character will consist of one nSkinAnimator 
    instance and one or more nSkinShapeNode instances. The nSkinAnimator is used to setup 
    the character's skeleton and connect it to the animation data, the nSkinShapeNode(s) 
    are used to render parts of the character. The nSkinAnimator obtains the animation 
    data from an @e nanim2/nax2 animation file and nSkinShapeNode obtains mesh data from 
    an @e n3d2/nvx2 mesh file.


    @section NebulaCharAnimSkinPartion Skin Partitioning

    Nebula2 performs smooth skinning completely in the vertex shader, as such
    there are two important things that you need to be aware of... 
    
    -# There is a limit to the number of joints that the vertex shader can 
    handle in one go. This limitation can be overcome by breaking
    up the skinned mesh into pieces. In Nebula2 these pieces are referred to as
    <em>skin partitions</em> or <em>skin fragments</em>. 
    -# At most 4 joints can influence any one vertex of the skinned mesh.
  
    @note Nebula2 offers a way to partition the skinned mesh using nSkinPartitioner. 
    See nSkinPartitioner for more details.

    Each skin partition is rendered in a separate rendering call. This means that the 
    fewer partitions a mesh is broken into, the faster it will be rendered.
    

    @section NebulaCharAnimStateAndClip Animation State and Clip
  
    An animation state is a collection of clips, and an animation clip is an
    animation with a specific blend value.

    @subsection NebulaCharAnimChangingState Changing Animation State
 
    A transition from one animation to another animation is done by a 
    change of state. Following is a simple example of how you can transition 
    from one animation to another by changing the animation state using 
    nSkinAnimator::SetStateChannel().

    There are three different animation states in our animation file(.anim2), 
    @e 'idle', @e 'walk' and @e 'run'. The first animation state in the 
    animation file is taken to be the default animation, so we specify the 
    'idle' animation at the start of the file.

    Before we go on we'll create variables to hold the indices of the
    animations we've specified in our animation file. This isn't necessary
    but it's nicer to refer to an appropriately named variable as opposed
    to a nameless index.

    @verbatim
    set idle_anim_idx 0
    set walk_anim_idx 1
    set run_anim_idx  2
    @endverbatim

    We need to create one integer variable in the nVariableServer to hold 
    the current animation state for our character, and set it's initial value
    to our 'idle' animation. We can then change the current animation state 
    by changing the value of this variable.

    Assuming that you want to create this variable via the Nebula console, it 
    can be done like so...

    @verbatim
    >/sys/servers/variable/.setintvariable "mycharacterstate" $idle_anim_idx
    @endverbatim

    Then we need to tell the nSkinAnimator to obtain the current animation
    state for our character each frame from the mycharacterstate variable we
    just created.
    
    @verbatim
    >/usr/scene/mychar/skinanimator/.setstatechannel "mycharacterstate"
    @endverbatim

    You can then change the animation from @e 'idle' to @e 'walk' by changing 
    the value of the mycharacterstate variable.
    
    @verbatim
    >/sys/servers/variable/.setintvariable "mycharacterstate" $walk_anim_idx
    @endverbatim

    Every frame the nSkinAnimator will look at the value of the 
    mycharacterstate variable to determine the current animation it should
    be playing. If the value has changed since the last frame the nSkinAnimator
    will begin to automatically blend the previous animation with the new
    one you've just specified over a number of frames.
    
    
    @subsection NebulaCharAnimBlending Blending Animations

    ...

    @note All relevant animations for a skeleton should reside in one animation
    file (nanim2/nax2).


    @section NebulaCharAnimAttach Using Attachment Node
    ...

*/
