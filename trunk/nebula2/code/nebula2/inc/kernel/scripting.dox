/**
    @defgroup NebulaScriptServices Scripting Support
    @ingroup Kernel

    This section of the documentation covers Nebula script system and 
    it's subsystems.

      - @ref NebulaScriptServicesOverview
      - @ref NebulaScriptServicesRunScript


    @section NebulaScriptServicesOverview Overview

    Nebula's scripting system integrates with its
    @ref NebulaObjectSystem to provide scripting support
    in multiple languages.

    The script server connects the internal language-independent scripting
    mechanism to a specific scripting language. It translates commands
    emitted from objects into script statements, and back into commands that
    are understood by an object's Dispatch() method.
    So scripting in Nebula2 means invoking script commands directly on C++
    objects. It can be possible if a class is derived from nRoot.
    Saying other, every nRoot derived class is scriptable.

    The script server also implements an ipc port to allow external 
    applications (running in another process or another machine) 
    to talk to local objects. See @ref Ipc sectoin for the details.

    @see @ref NebulaWritingClass page for more details about scriptable class.

    Out of the box, Nebula supports TCL and a binary
    script server (which is for persistence rather than
    scripting directly). See @ref TclScriptServices section for more details. 
    However, there are contributed modules that provide scripting support 
    for other languages:

       - @ref NLuaServerContribModule
       - @ref PythonScriptServices
       - @ref RubyScriptServices
       - nJava
       - nDotNet

    @note
    MiroTcl is light-weight version of Tcl. It is written for Nebula2 based 
    on Tcl and reduced it's command to 36 commands and it's size to 160KB from 
    660KB. It is good for minimal envrionments like game consoles.
    

    @section NebulaScriptServicesRunScript Running Script

    Nebula provides a way to run script file or specific script function within 
    its console or c++.

    @subsection NebulaScriptServicesRunScriptConsole Within Console 

    You can run script file with <tt>'get'</tt> command within Nebula console:
    @verbatim
    >get d:\data\scripts\foo.n2
    @endverbatim

    @subsection NebulaScriptServicesRunScriptCplusplus Within C++ 

    You can run a script file with @ref nScriptServer::RunScript() function: 
    @code
    scriptServer->RunScript("data/scripts/foo.n2", result);
    @endcode

    You can also run a specific script function of a script file by calling 
    @ref nScriptServer::RunFunction() function:
    @code
    scriptServer->RunFunction("OnStartUp", result);
    @endcode

    Note that "OnStartUp" script function does not have any in-arguments. 
    @ref nScriptServer::RunFunction() cannot run a script function which has 
    any in-arguments.

    Any results happened from the execution will be passed to the second 
    in-arguments.

*/
