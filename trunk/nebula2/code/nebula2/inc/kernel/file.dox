/**
    @defgroup File File I/O and File System Access
    @ingroup Kernel

    @brief A cross platform set of file I/O and file system objects
    that also support access to virtualized file systems.

    The features of the file system are:
     - a fileserver object encapsulates the host filesystem.
     - completely removes differences between Windows, Linux or XBox filesystem.
     - OOP concepts <br>
       File and Directory as comfortable C++ classes (nFile, nDirectory).
     - support platform specific service. <br>
       Nebula uses Win32 file routines under Windows not the ANSI C file 
       routines. (@c CreateFile(), @c WriteFile(), @c ReadFile() etc.)
     - offers 'Directory Assigns'
       - Use <tt>textures:image.dds</tt> instead of
         <tt>c:\\program files\\...\\textures\\image.dds</tt>
       - Let Nebula convert it to the absolute path.
       - This is inspired by AmigaOS.

    Nebula also supports a file archive system which is integrated with its file sytem.

    The features of file archive system are:
     - similiar to Quake's PAK files
     - packs directory hierarchies into one single file
     - no wasted disk space with many small files
     - drastically reduced loading time 
     - cleaner application directory layout
    
    @see @ref NPKFile.

    @section NebulaFileManagementInitialization File Server Initialization

    By default, the kernel server will create an instance of the
    nFileServer2 at @c /sys/servers/file2 when the kernel is
    initialized.

    It is also possible to subclass nFileServer2 to add additional or
    altered functionality, nNpkFileServer is an example of this. You
    may want to replace the default nFileServer2 instance with a
    specialized file server.

    In TCL:

@code
    delete /sys/servers/file2
    new nnpkserver /sys/servers/file2
@endcode

    In C++:
@code
    nFileServer2 * fileServer2;
    fileServer2 = kernelServer->Lookup("/sys/servers/file2");
    n_delete fileServer2;
    fileServer2 = (nFileServer2*)kernelServer->New("nnpkfileserver",
                                                   "/sys/servers/file2");
@endcode

    @warning That is obviously not safe, as anyone with a reference to
    the initial nFileServer2 instance will now be holding onto an invalid
    object.  The API will be changing to address this issue.

    @section NebulaFileManagementUsage File Server Usage

    In order to read and write files a nFile object should be created.

@code
    nFile* file = fileServer2->NewFileObject();
@endcode

    The nFile object can then be opened and read from.  The nFile object
    that is returned may be a subclass of nFile, such as nNpkFile,
    if you are using one of the more specialized nFileServer2 implementations.

    nFile objects are reference-counted (via nRefCounted), so they must
    be released when you are done with them rather than simply deleted.

    @todo Talk about nFileTime

@code
    // file input
    if (file->Open(fileName, "rb"))
    {
        void* buf = n_malloc(dataSize);
        int num = file->Read(buf, dataSize);
    }
    file->Close();

    // file output
    if (file->Open("todo.txt", "w"))
    {
        file->PutS("Must write scene graph demo\n");
    }
    file->Close();
    file->Release();
@endcode

    @todo Talk about nFileNode

    The nDirectory class can be used to search directories.

@code
    nDirectory* folder = fileServer2->NewDirectoryObject();
    if(folder->Open(dir))
    {
        if(!folder->IsEmpty())
        {
            do
            {
                entryName = folder->GetEntryName();
                if(folder->GetEntryType() == nDirectory::FILE)
                {
                    ...
                }
            } while (folder->SetToNextEntry());
        }
    }
    folder->Close();
@endcode

    When using a more specialized nFileServer2 implementation, the nDirectory
    object returned may be a more specialized subclass.

    @section NebulaFileManagementAssigns Assigns

    Assigns provide a way to isolate system-specific paths from a path or
    filename.  They are used in a path as an alias, which gets mapped
    to a new absolute path.  For example, with an assign @c "data" that maps to
    @c "/usr/local/share/nebula":

@verbatim
    "data:vehicle/vehicle.n3d"
@endverbatim

    would map to:

@verbatim
    "/usr/local/share/nebula/vehicle/vehicle.n3d"
@endverbatim

    Assigns can be read and written with nFileServer2:

      - nFileServer2::GetAssign()
      - nFileServer2::SetAssign()

    Assigns are stored as nEnv variables within @c /sys/share/assigns/
    in the Nebula object hierarchy.  By default, two assigns exist:

@verbatim
    /sys/share/assigns/home  - Nebula's home directory
    /sys/share/assigns/bin   - Nebula's application directory
@endverbatim

    @todo Mention the @c proj assign.

    @todo Talk about how to mangle paths to process assigns and so on.

    @section NebulaFileManagementShutdown Shutdown

    As the kernel server manages the file server, it will automatically
    handle shutting it down at the appropriate time.
*/
