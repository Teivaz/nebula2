#---------------------------------------------------------------------
#   config.mak
#   ==========
#   Configuration file for the make process
#   
#   may this file could be generated by an ./configure script
#   
#   not clean yet, no win32 setup because the makeunix.tcl don't
#   generate win32 lines yet.
#   
#   27-Mar-2003 cubejk  copy&paste from nebula1 config.mak & defines.mak
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# N_PLATFORM = __LINUX__, __WIN32__
# Automatically try to determine the platform we are running
# on. WinNT and Linux offer the 'OSTYPE' env var, Win9x not.
#---------------------------------------------------------------------
N_PLATFORM = __WIN32__
ifeq ($(OSTYPE),linux)
  N_PLATFORM  = __LINUX__
endif 
ifeq ($(OSTYPE),linux-gnu)
  N_PLATFORM = __LINUX__
endif
ifeq ($(OSTYPE),Linux)
  N_PLATFORM = __LINUX__
endif
ifeq ($(OSTYPE),darwin)
  N_PLATFORM = __MACOSX__
endif

#---------------------------------------------------------------------
# N_TARGETDIR - where the exe and the lib files should stay
# N_OBJECTDIR - the place for the object files
#---------------------------------------------------------------------
ifeq ($(N_PLATFORM),__LINUX__)
    N_TARGETDIR = ../../../bin/linux/
endif
ifeq ($(N_PLATFORM),__WIN32__)
    N_TARGETDIR = ../../../bin/win32/
endif
N_OBJECTDIR = ../make/

#---------------------------------------------------------------------
# N_COMPILER = __VC__, __GNUC__
# Based on N_PLATFORM, set the compiler type macro.
#---------------------------------------------------------------------
ifeq ($(N_PLATFORM),__WIN32__)
  N_COMPILER = __VC__
else 
  N_COMPILER = __GNUC__
endif

#---------------------------------------------------------------------
# N_NOTHREADS = true/false (default=false, except on OS X)
# Set to 'true' when you want to compile without multithreading
# support. This is mainly for debugging reasons. Please note
# that all sockets based code uses multithreading and will
# not function when multithreading is turned off.
#---------------------------------------------------------------------
#
ifeq ($(N_PLATFORM),__MACOSX__)
  N_NOTHREADS = true
else
  N_NOTHREADS = false
endif

#---------------------------------------------------------------------
# N_PYTHON_INCLUDES
# Defines include directory for Python
#---------------------------------------------------------------------
ifeq ($(N_PLATFORM),__LINUX__)
  N_PYTHON_INCLUDES = /usr/include/python2.2/
endif

ifeq ($(N_PLATFORM),__MACOSX__)
  N_PYTHON_INCLUDES = /usr/include/python2.2/
endif

#---------------------------------------------------------------------
# N_PYTHON_LIBS
# Defines lib directory for Python
#---------------------------------------------------------------------
ifeq ($(N_PLATFORM),__LINUX__)
  N_PYTHON_LIBS = /usr/lib/python2.2/config/
endif

#---------------------------------------------------------------------
# N_MEMMANAGER = true/false
# Turn on/off Nebula's own memory manager. The mem manager optimizes
# small block allocations, and offers some debugging support
# (bounds and mem leak checking).
# GCC doesn't like it to overload the global 'new' operator for
# some reason.
#---------------------------------------------------------------------
#
ifeq ($(N_COMPILER),__GNUC__)
  N_MEMMANAGER = false
else
  N_MEMMANAGER = true
endif

#---------------------------------------------------------------------
ifeq ($(N_COMPILER),__VC__)
# VisualC under Win32
  RC          = rc
  CC          = cl
  TCL         = tclsh84
  AR          = lib
  LD          = link
  DOCTOOL     = doxygen
  IPATH_OPT   = /I
  LPATH_OPT   = /LIBPATH:
  TAR_OPT     =
  LIB_OPT     =
  EXE         = .exe
  OBJ         = .obj
  DLL_PRE     =
  DLL_POST    = .dll
  LIB_PRE     =
  LIB_POST    = .lib
  CC_OPT      = /Tp
  OBJ_OPT     = /Fo
  OUT_OPT     = /Fe
  NOLINK_OPT  = /c
  SYM_OPT     = /D
endif
ifeq ($(N_COMPILER),__GNUC__)
# GCC in Linux
  ifeq ($(N_PLATFORM),__MACOSX__)
    CC        = c++
  else
    CXX        = g++-3.0
    CC         = gcc-3.0 -x c
    #CC        = g++
  endif
  TCL         = tclsh
  AR          = ar
  LD          = ld
  DOCTOOL     = doxygen
  IPATH_OPT   = -I
  LPATH_OPT   = -L
  TAR_OPT     = -o
  LIB_OPT     = -l
  EXE         = .exe
  OBJ         = .o
  DLL_PRE     = lib
  DLL_POST    = .so
  LIB_PRE     = lib
  LIB_POST    = .a
  CC_OPT      =
  OBJ_OPT     = -o
  OUT_OPT     = -o
  NOLINK_OPT  = -c
  SYM_OPT     = -D
  #flags
  N_WARNFLAGS     = -W -Wall -Wno-multichar -Wno-reorder
  #N_WARNFLAGS    = 
  N_OPTIMIZEFLAGS = -O3 -ffast-math -fomit-frame-pointer
  N_PROFILEFLAGS  = -p
  N_DEBUGFLAGS    = -g
  INC_PATH    = ../inc/
endif

#---------------------------------------------------------------------
# system specific setup
#---------------------------------------------------------------------
ifeq ($(N_COMPILER),__GNUC__)
  INCDIR += $(IPATH_OPT)$(INC_PATH)
  INCDIR += $(IPATH_OPT)$(N_PYTHON_INCLUDES)
  
  LIBDIR += $(LPATH_OPT)$(N_TARGETDIR)
  ifneq (X$(N_PYTHON_LIBS),X)
    LIBDIR += $(LPATH_OPT)$(N_PYTHON_LIBS)
  endif
  
  ifeq ($(N_PLATFORM),__LINUX__)
    LIBDIR += $(LPATH_OPT)/usr/X11R6/lib
  endif
  
  ifeq ($(N_PLATFORM),__MACOSX__)
    OSX_CFLAGS = -fno-common
  endif
  
  ifeq ($(N_MEMMANAGER),true)
    CFLAGS += -D__NEBULA_MEM_MANAGER__
  endif
  
  #???
  SYS_LIBS = m
  
  #threads
  ifeq ($(N_NOTHREADS),false) 
    CFLAGS += -D_REENTRANT
    LIBS   += -lpthread
  else
    CFLAGS += -D__NEBULA_NO_THREADS__
  endif
  
endif

#---------------------------------------------------------------------
# CFLAGS            , CFLAGS-d, CFLAGS-p the build type specific flags
# release - default , debug   , profile
#---------------------------------------------------------------------
ifeq ($(N_COMPILER),__GNUC__)
    CFLAGS += $(SYM_OPT)$(N_PLATFORM) -DN_STATIC
    CFLAGS += $(N_WARNFLAGS)
    CFLAGS-d = $(CFLAGS) $(N_DEBUGFLAGS)
    CFLAGS-p = $(CFLAGS) $(N_PROFILEFLAGS)
    CFLAGS  += $(N_OPTIMIZEFLAGS)
endif
