/**
    @page NebulaWritingClass Writing A New nRoot Derived Class

    This page describes how to create nRoot derived classes, that is classes
    that have nRoot somewhere in their ancestry. Instances of a nRoot derived
    class are placed in the @ref NebulaObjectSystemNamedObjectHierarchy (NOH) ,
    so each instance is a node in a tree structure with
    a path name like @c /sys/servers/gfx. nRoot derived classes can also have
    script commands that can be called from script and used for object
    persistence.

    To compile your new class, you will need to add it to the build system
    files (the <tt>.bld</tt> files). See @ref NebulaBuildSystem for details.
    After adding your new files to the new buildsystem, make sure that you
    re-run <tt>update.tcl</tt> to regenerate the new project files.

    First, we create a header file, @c nmyclass.h and write a class which
    derives from nRoot. We will later bind some of the methods to the script
    interface so that they can be called from script.

    @code
    class nMyClass : public nRoot
    {
    public:
        nMyClass();
        virtual ~nMyClass();

        int DoJob(char* str);

        void SetFoo(bool b);
        bool GetFoo() const;
    };
    @endcode

    Next, we create a implementation file @c nmyclass_main.cc.

    @code
    #include "mypackage/nmyclass.h"

    nNebulaScriptClass(nMyClass, "nroot");
    @endcode

    #nNebulaScriptClass is a macro that sets up the class to be used for
    scripting and in the NOH. There are a few different versions of this macro
    (see ndefclass.h and @ref NebulaObjectSystem), the most commonly used are:

     - #nNebulaClass:
       Use for classes that don't have any script commands.
     - #nNebulaScriptClass:
       Use for classes that will have script commands.

    Every nRoot derived class must use one of these macros.

    We also define a constructor and destructor for @c nMyClass.

    @code
    // constructor.
    nMyClass::nMyClass()
    {
    }

    // destructor.
    nMyClass::~nMyClass()
    {
    }
    @endcode

    @warning Because nRoot derived classes are created by the nKernelServer,
    they can only have the default destructor.

    Next we make the script and persistence interface. The script commands are
    put in their own file which should have be named
    <tt>&lt;classname&gt;_cmds.cc</tt>, in this case we call the
    file @c nmyclass_cmds.cc.

    The first thing we do is declare static functions for each script command.
    Then we define a function @c n_initcmds(). This function is used to bind the
    static functions to each script command.

    The function which we want to make scriptable is @c nMyClass::DoJob().

    @code
    // callback function declaration.
    static void n_dojob(void* slf, nCmd* cmd);
    ...

    void
    n_initcmds(nClass* cl)
    {
        cl->BeginCmds();

        // register script commands.
        cl->AddCmd("i_dojob_s",  'DOJB', n_dojob);
        cl->AddCmd("v_setfoo_b", 'SETF', n_setfoo);
        cl->AddCmd("b_getfoo_v", 'GETF', n_getfoo);

        cl->EndCmds();
    }
    ...
    @endcode

    The nClass::AddCmd() function takes 3 arguments, the first is a string
    describing the command name and the number of in-arguments and
    out-arguments. In the case of @c dojob, it takes a single string
    in-argument and returns a single integer out-argument. The basic
    structure of the command name is:

    @verbatim
    <out-argument-list>_<command-name>_<in-argument-list>
    @endverbatim

    The codes for the argument types are:

      - @c v : void type
      - @c i : integer type
      - @c f : float type
      - @c s : string type
      - @c b : bool type
      - @c o : object type

    You can use anything for the @c command-name but the method name is
    prefered. The second arguement to @c AddCmd() @c 'DOJB' is internal
    identifier for this script command. You can use any four characters
    but you must ensure that the identifier is unique for this class and
    all ancestor classes.  For more information on this value, see
    ::nFourCC.  The nVariableServer also makes use of ::nFourCC values.

    The last argument to @c AddCmd() is the static function that will handle
    this script comand.

    Now we define the script command's function.

    @code
    static void
    n_dojob(void* slf, nCmd* cmd)
    {
        // get in-argument.
        char* inArg = cmd->In()->GetS();

        // call nMyClass::DoJob.
        int ret = slf->DoJob(inArg);

        // pass out-argument out.
        cmd->Out()->SetI(ret);
    }
    @endcode

    The first argument of the callback function is the class instance which the
    script command belongs to, so this is @c nMyClass class instance.
    The second argument is in and out arguments for this script
    command. Recall the arguments of @c nMyClass::DoJob(), which has one integer
    type of out-argument and one string type of arguement. We can easily
    get those argument from the nCmd. Call nCmd::In() to retrieve in-arguments
    and nCmd::Out() for out-arguments.

    We also provide documentation for each and every script method that fits
    into the auto-generated documentation.  This requires some special
    comments before the implementation of the static function.  See
    @ref NebulaTwoScriptInterfaceForDevelopers for some details on how to
    format this documentation.

    Next, we make @c nMyClass support object persistence.

    To make the class to support object persistence, we override @c SaveCmds().

    Declare @c SaveCmds of @c nMyClass in header file like this:

    @code
    class nMyClass : public nRoot
    {
    public:
    ...
        bool SaveCmds(nPersistServer* ps);
    ...
    };
    @endcode

    Define @c nMyClass::SaveCmds() function in @c nmyclass_cmds.cc
    implementation file like this:

    @code
    bool
    nMyClass::SaveCmds(nPersistServer* ps)
    {
        ...

        nCmd* cmd;

        cmd = ps->GetCmd(this, 'SETF');
        cmd->In()->SetB(this->foo);
        ps->PutCmd(cmd);

        ...
    }
    @endcode

    Things to do for object persistence is:

      - Get command from nPersistServer by calling @c GetCmd().
      - Setup the appropriate arguments for this command.
      - Put command back to nPersistServer. After the call to @c PutCmd(),
        @c cmd should no longer be considered to be valid as commands
        may be shared and @c PutCmd() has released it.

    That's all for object persistence. Now the instance of @c nMyClass will be
    saved out to script file whenever you call 'save' or 'saveas' in console
    or script. (This script file may be a binary file that is efficiently
    loaded and parsed if you're using the nBinScriptServer.)

    Nebula 2 contains many classes which operate in this manner and which
    wll give you a clearer understanding.  Be sure to look at the Nebula
    implementation for examples and recommended patterns for doing things.
    nTransformNode and nShapeNode are good starting points!
*/

